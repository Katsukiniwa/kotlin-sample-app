/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.information_schema.tables


import nu.studer.sample.information_schema.InformationSchema

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Columns(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.COLUMNS</code>
         */
        val COLUMNS = Columns()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>information_schema.COLUMNS.TABLE_CATALOG</code>.
     */
    val TABLE_CATALOG: TableField<Record, String?> = createField(DSL.name("TABLE_CATALOG"), SQLDataType.VARCHAR(512).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.COLUMNS.TABLE_SCHEMA</code>.
     */
    val TABLE_SCHEMA: TableField<Record, String?> = createField(DSL.name("TABLE_SCHEMA"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.COLUMNS.TABLE_NAME</code>.
     */
    val TABLE_NAME: TableField<Record, String?> = createField(DSL.name("TABLE_NAME"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.COLUMNS.COLUMN_NAME</code>.
     */
    val COLUMN_NAME: TableField<Record, String?> = createField(DSL.name("COLUMN_NAME"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.COLUMNS.ORDINAL_POSITION</code>.
     */
    val ORDINAL_POSITION: TableField<Record, ULong?> = createField(DSL.name("ORDINAL_POSITION"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.COLUMNS.COLUMN_DEFAULT</code>.
     */
    val COLUMN_DEFAULT: TableField<Record, String?> = createField(DSL.name("COLUMN_DEFAULT"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>information_schema.COLUMNS.IS_NULLABLE</code>.
     */
    val IS_NULLABLE: TableField<Record, String?> = createField(DSL.name("IS_NULLABLE"), SQLDataType.VARCHAR(3).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.COLUMNS.DATA_TYPE</code>.
     */
    val DATA_TYPE: TableField<Record, String?> = createField(DSL.name("DATA_TYPE"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.COLUMNS.CHARACTER_MAXIMUM_LENGTH</code>.
     */
    val CHARACTER_MAXIMUM_LENGTH: TableField<Record, ULong?> = createField(DSL.name("CHARACTER_MAXIMUM_LENGTH"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>information_schema.COLUMNS.CHARACTER_OCTET_LENGTH</code>.
     */
    val CHARACTER_OCTET_LENGTH: TableField<Record, ULong?> = createField(DSL.name("CHARACTER_OCTET_LENGTH"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>information_schema.COLUMNS.NUMERIC_PRECISION</code>.
     */
    val NUMERIC_PRECISION: TableField<Record, ULong?> = createField(DSL.name("NUMERIC_PRECISION"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>information_schema.COLUMNS.NUMERIC_SCALE</code>.
     */
    val NUMERIC_SCALE: TableField<Record, ULong?> = createField(DSL.name("NUMERIC_SCALE"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>information_schema.COLUMNS.DATETIME_PRECISION</code>.
     */
    val DATETIME_PRECISION: TableField<Record, ULong?> = createField(DSL.name("DATETIME_PRECISION"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>information_schema.COLUMNS.CHARACTER_SET_NAME</code>.
     */
    val CHARACTER_SET_NAME: TableField<Record, String?> = createField(DSL.name("CHARACTER_SET_NAME"), SQLDataType.VARCHAR(32), this, "")

    /**
     * The column <code>information_schema.COLUMNS.COLLATION_NAME</code>.
     */
    val COLLATION_NAME: TableField<Record, String?> = createField(DSL.name("COLLATION_NAME"), SQLDataType.VARCHAR(32), this, "")

    /**
     * The column <code>information_schema.COLUMNS.COLUMN_TYPE</code>.
     */
    val COLUMN_TYPE: TableField<Record, String?> = createField(DSL.name("COLUMN_TYPE"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>information_schema.COLUMNS.COLUMN_KEY</code>.
     */
    val COLUMN_KEY: TableField<Record, String?> = createField(DSL.name("COLUMN_KEY"), SQLDataType.VARCHAR(3).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.COLUMNS.EXTRA</code>.
     */
    val EXTRA: TableField<Record, String?> = createField(DSL.name("EXTRA"), SQLDataType.VARCHAR(30).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.COLUMNS.PRIVILEGES</code>.
     */
    val PRIVILEGES: TableField<Record, String?> = createField(DSL.name("PRIVILEGES"), SQLDataType.VARCHAR(80).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.COLUMNS.COLUMN_COMMENT</code>.
     */
    val COLUMN_COMMENT: TableField<Record, String?> = createField(DSL.name("COLUMN_COMMENT"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.COLUMNS.GENERATION_EXPRESSION</code>.
     */
    val GENERATION_EXPRESSION: TableField<Record, String?> = createField(DSL.name("GENERATION_EXPRESSION"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.COLUMNS</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.COLUMNS</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.COLUMNS</code> table reference
     */
    constructor(): this(DSL.name("COLUMNS"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, COLUMNS, null)
    override fun getSchema(): Schema = InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Columns = Columns(DSL.name(alias), this)
    override fun `as`(alias: Name): Columns = Columns(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Columns = Columns(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Columns = Columns(name, null)
}
