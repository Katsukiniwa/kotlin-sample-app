/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.information_schema.tables


import java.time.LocalDateTime

import nu.studer.sample.information_schema.InformationSchema

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Triggers(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.TRIGGERS</code>
         */
        val TRIGGERS = Triggers()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>information_schema.TRIGGERS.TRIGGER_CATALOG</code>.
     */
    val TRIGGER_CATALOG: TableField<Record, String?> = createField(DSL.name("TRIGGER_CATALOG"), SQLDataType.VARCHAR(512).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.TRIGGER_SCHEMA</code>.
     */
    val TRIGGER_SCHEMA: TableField<Record, String?> = createField(DSL.name("TRIGGER_SCHEMA"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.TRIGGER_NAME</code>.
     */
    val TRIGGER_NAME: TableField<Record, String?> = createField(DSL.name("TRIGGER_NAME"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.EVENT_MANIPULATION</code>.
     */
    val EVENT_MANIPULATION: TableField<Record, String?> = createField(DSL.name("EVENT_MANIPULATION"), SQLDataType.VARCHAR(6).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.EVENT_OBJECT_CATALOG</code>.
     */
    val EVENT_OBJECT_CATALOG: TableField<Record, String?> = createField(DSL.name("EVENT_OBJECT_CATALOG"), SQLDataType.VARCHAR(512).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.EVENT_OBJECT_SCHEMA</code>.
     */
    val EVENT_OBJECT_SCHEMA: TableField<Record, String?> = createField(DSL.name("EVENT_OBJECT_SCHEMA"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.EVENT_OBJECT_TABLE</code>.
     */
    val EVENT_OBJECT_TABLE: TableField<Record, String?> = createField(DSL.name("EVENT_OBJECT_TABLE"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.ACTION_ORDER</code>.
     */
    val ACTION_ORDER: TableField<Record, Long?> = createField(DSL.name("ACTION_ORDER"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.ACTION_CONDITION</code>.
     */
    val ACTION_CONDITION: TableField<Record, String?> = createField(DSL.name("ACTION_CONDITION"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>information_schema.TRIGGERS.ACTION_STATEMENT</code>.
     */
    val ACTION_STATEMENT: TableField<Record, String?> = createField(DSL.name("ACTION_STATEMENT"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.ACTION_ORIENTATION</code>.
     */
    val ACTION_ORIENTATION: TableField<Record, String?> = createField(DSL.name("ACTION_ORIENTATION"), SQLDataType.VARCHAR(9).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.ACTION_TIMING</code>.
     */
    val ACTION_TIMING: TableField<Record, String?> = createField(DSL.name("ACTION_TIMING"), SQLDataType.VARCHAR(6).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.ACTION_REFERENCE_OLD_TABLE</code>.
     */
    val ACTION_REFERENCE_OLD_TABLE: TableField<Record, String?> = createField(DSL.name("ACTION_REFERENCE_OLD_TABLE"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.ACTION_REFERENCE_NEW_TABLE</code>.
     */
    val ACTION_REFERENCE_NEW_TABLE: TableField<Record, String?> = createField(DSL.name("ACTION_REFERENCE_NEW_TABLE"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.ACTION_REFERENCE_OLD_ROW</code>.
     */
    val ACTION_REFERENCE_OLD_ROW: TableField<Record, String?> = createField(DSL.name("ACTION_REFERENCE_OLD_ROW"), SQLDataType.VARCHAR(3).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.ACTION_REFERENCE_NEW_ROW</code>.
     */
    val ACTION_REFERENCE_NEW_ROW: TableField<Record, String?> = createField(DSL.name("ACTION_REFERENCE_NEW_ROW"), SQLDataType.VARCHAR(3).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.CREATED</code>.
     */
    val CREATED: TableField<Record, LocalDateTime?> = createField(DSL.name("CREATED"), SQLDataType.LOCALDATETIME(2), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.SQL_MODE</code>.
     */
    val SQL_MODE: TableField<Record, String?> = createField(DSL.name("SQL_MODE"), SQLDataType.VARCHAR(8192).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.DEFINER</code>.
     */
    val DEFINER: TableField<Record, String?> = createField(DSL.name("DEFINER"), SQLDataType.VARCHAR(93).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.CHARACTER_SET_CLIENT</code>.
     */
    val CHARACTER_SET_CLIENT: TableField<Record, String?> = createField(DSL.name("CHARACTER_SET_CLIENT"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.COLLATION_CONNECTION</code>.
     */
    val COLLATION_CONNECTION: TableField<Record, String?> = createField(DSL.name("COLLATION_CONNECTION"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.DATABASE_COLLATION</code>.
     */
    val DATABASE_COLLATION: TableField<Record, String?> = createField(DSL.name("DATABASE_COLLATION"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.TRIGGERS</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.TRIGGERS</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.TRIGGERS</code> table reference
     */
    constructor(): this(DSL.name("TRIGGERS"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, TRIGGERS, null)
    override fun getSchema(): Schema = InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Triggers = Triggers(DSL.name(alias), this)
    override fun `as`(alias: Name): Triggers = Triggers(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Triggers = Triggers(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Triggers = Triggers(name, null)
}
