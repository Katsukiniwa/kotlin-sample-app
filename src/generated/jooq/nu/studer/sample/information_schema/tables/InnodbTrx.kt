/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.information_schema.tables


import java.time.LocalDateTime

import nu.studer.sample.information_schema.InformationSchema

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InnodbTrx(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.INNODB_TRX</code>
         */
        val INNODB_TRX = InnodbTrx()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>information_schema.INNODB_TRX.trx_id</code>.
     */
    val TRX_ID: TableField<Record, String?> = createField(DSL.name("trx_id"), SQLDataType.VARCHAR(18).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_state</code>.
     */
    val TRX_STATE: TableField<Record, String?> = createField(DSL.name("trx_state"), SQLDataType.VARCHAR(13).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_started</code>.
     */
    val TRX_STARTED: TableField<Record, LocalDateTime?> = createField(DSL.name("trx_started"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_requested_lock_id</code>.
     */
    val TRX_REQUESTED_LOCK_ID: TableField<Record, String?> = createField(DSL.name("trx_requested_lock_id"), SQLDataType.VARCHAR(81), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_wait_started</code>.
     */
    val TRX_WAIT_STARTED: TableField<Record, LocalDateTime?> = createField(DSL.name("trx_wait_started"), SQLDataType.LOCALDATETIME(0), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_weight</code>.
     */
    val TRX_WEIGHT: TableField<Record, ULong?> = createField(DSL.name("trx_weight"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_mysql_thread_id</code>.
     */
    val TRX_MYSQL_THREAD_ID: TableField<Record, ULong?> = createField(DSL.name("trx_mysql_thread_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_query</code>.
     */
    val TRX_QUERY: TableField<Record, String?> = createField(DSL.name("trx_query"), SQLDataType.VARCHAR(1024), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_operation_state</code>.
     */
    val TRX_OPERATION_STATE: TableField<Record, String?> = createField(DSL.name("trx_operation_state"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_tables_in_use</code>.
     */
    val TRX_TABLES_IN_USE: TableField<Record, ULong?> = createField(DSL.name("trx_tables_in_use"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_tables_locked</code>.
     */
    val TRX_TABLES_LOCKED: TableField<Record, ULong?> = createField(DSL.name("trx_tables_locked"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_lock_structs</code>.
     */
    val TRX_LOCK_STRUCTS: TableField<Record, ULong?> = createField(DSL.name("trx_lock_structs"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_lock_memory_bytes</code>.
     */
    val TRX_LOCK_MEMORY_BYTES: TableField<Record, ULong?> = createField(DSL.name("trx_lock_memory_bytes"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_rows_locked</code>.
     */
    val TRX_ROWS_LOCKED: TableField<Record, ULong?> = createField(DSL.name("trx_rows_locked"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_rows_modified</code>.
     */
    val TRX_ROWS_MODIFIED: TableField<Record, ULong?> = createField(DSL.name("trx_rows_modified"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_concurrency_tickets</code>.
     */
    val TRX_CONCURRENCY_TICKETS: TableField<Record, ULong?> = createField(DSL.name("trx_concurrency_tickets"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_isolation_level</code>.
     */
    val TRX_ISOLATION_LEVEL: TableField<Record, String?> = createField(DSL.name("trx_isolation_level"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_unique_checks</code>.
     */
    val TRX_UNIQUE_CHECKS: TableField<Record, Int?> = createField(DSL.name("trx_unique_checks"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_foreign_key_checks</code>.
     */
    val TRX_FOREIGN_KEY_CHECKS: TableField<Record, Int?> = createField(DSL.name("trx_foreign_key_checks"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_last_foreign_key_error</code>.
     */
    val TRX_LAST_FOREIGN_KEY_ERROR: TableField<Record, String?> = createField(DSL.name("trx_last_foreign_key_error"), SQLDataType.VARCHAR(256), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_adaptive_hash_latched</code>.
     */
    val TRX_ADAPTIVE_HASH_LATCHED: TableField<Record, Int?> = createField(DSL.name("trx_adaptive_hash_latched"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_adaptive_hash_timeout</code>.
     */
    val TRX_ADAPTIVE_HASH_TIMEOUT: TableField<Record, ULong?> = createField(DSL.name("trx_adaptive_hash_timeout"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_is_read_only</code>.
     */
    val TRX_IS_READ_ONLY: TableField<Record, Int?> = createField(DSL.name("trx_is_read_only"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_autocommit_non_locking</code>.
     */
    val TRX_AUTOCOMMIT_NON_LOCKING: TableField<Record, Int?> = createField(DSL.name("trx_autocommit_non_locking"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.INNODB_TRX</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.INNODB_TRX</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.INNODB_TRX</code> table reference
     */
    constructor(): this(DSL.name("INNODB_TRX"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, INNODB_TRX, null)
    override fun getSchema(): Schema = InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): InnodbTrx = InnodbTrx(DSL.name(alias), this)
    override fun `as`(alias: Name): InnodbTrx = InnodbTrx(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): InnodbTrx = InnodbTrx(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): InnodbTrx = InnodbTrx(name, null)
}
