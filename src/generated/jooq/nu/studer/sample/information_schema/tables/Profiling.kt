/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.information_schema.tables


import java.math.BigDecimal

import nu.studer.sample.information_schema.InformationSchema

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Profiling(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.PROFILING</code>
         */
        val PROFILING = Profiling()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>information_schema.PROFILING.QUERY_ID</code>.
     */
    val QUERY_ID: TableField<Record, Int?> = createField(DSL.name("QUERY_ID"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>information_schema.PROFILING.SEQ</code>.
     */
    val SEQ: TableField<Record, Int?> = createField(DSL.name("SEQ"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>information_schema.PROFILING.STATE</code>.
     */
    val STATE: TableField<Record, String?> = createField(DSL.name("STATE"), SQLDataType.VARCHAR(30).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.PROFILING.DURATION</code>.
     */
    val DURATION: TableField<Record, BigDecimal?> = createField(DSL.name("DURATION"), SQLDataType.DECIMAL(9, 6).nullable(false).defaultValue(DSL.inline("0.000000", SQLDataType.DECIMAL)), this, "")

    /**
     * The column <code>information_schema.PROFILING.CPU_USER</code>.
     */
    val CPU_USER: TableField<Record, BigDecimal?> = createField(DSL.name("CPU_USER"), SQLDataType.DECIMAL(9, 6), this, "")

    /**
     * The column <code>information_schema.PROFILING.CPU_SYSTEM</code>.
     */
    val CPU_SYSTEM: TableField<Record, BigDecimal?> = createField(DSL.name("CPU_SYSTEM"), SQLDataType.DECIMAL(9, 6), this, "")

    /**
     * The column <code>information_schema.PROFILING.CONTEXT_VOLUNTARY</code>.
     */
    val CONTEXT_VOLUNTARY: TableField<Record, Int?> = createField(DSL.name("CONTEXT_VOLUNTARY"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.PROFILING.CONTEXT_INVOLUNTARY</code>.
     */
    val CONTEXT_INVOLUNTARY: TableField<Record, Int?> = createField(DSL.name("CONTEXT_INVOLUNTARY"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.PROFILING.BLOCK_OPS_IN</code>.
     */
    val BLOCK_OPS_IN: TableField<Record, Int?> = createField(DSL.name("BLOCK_OPS_IN"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.PROFILING.BLOCK_OPS_OUT</code>.
     */
    val BLOCK_OPS_OUT: TableField<Record, Int?> = createField(DSL.name("BLOCK_OPS_OUT"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.PROFILING.MESSAGES_SENT</code>.
     */
    val MESSAGES_SENT: TableField<Record, Int?> = createField(DSL.name("MESSAGES_SENT"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.PROFILING.MESSAGES_RECEIVED</code>.
     */
    val MESSAGES_RECEIVED: TableField<Record, Int?> = createField(DSL.name("MESSAGES_RECEIVED"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.PROFILING.PAGE_FAULTS_MAJOR</code>.
     */
    val PAGE_FAULTS_MAJOR: TableField<Record, Int?> = createField(DSL.name("PAGE_FAULTS_MAJOR"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.PROFILING.PAGE_FAULTS_MINOR</code>.
     */
    val PAGE_FAULTS_MINOR: TableField<Record, Int?> = createField(DSL.name("PAGE_FAULTS_MINOR"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.PROFILING.SWAPS</code>.
     */
    val SWAPS: TableField<Record, Int?> = createField(DSL.name("SWAPS"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.PROFILING.SOURCE_FUNCTION</code>.
     */
    val SOURCE_FUNCTION: TableField<Record, String?> = createField(DSL.name("SOURCE_FUNCTION"), SQLDataType.VARCHAR(30), this, "")

    /**
     * The column <code>information_schema.PROFILING.SOURCE_FILE</code>.
     */
    val SOURCE_FILE: TableField<Record, String?> = createField(DSL.name("SOURCE_FILE"), SQLDataType.VARCHAR(20), this, "")

    /**
     * The column <code>information_schema.PROFILING.SOURCE_LINE</code>.
     */
    val SOURCE_LINE: TableField<Record, Int?> = createField(DSL.name("SOURCE_LINE"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.PROFILING</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.PROFILING</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.PROFILING</code> table reference
     */
    constructor(): this(DSL.name("PROFILING"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PROFILING, null)
    override fun getSchema(): Schema = InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Profiling = Profiling(DSL.name(alias), this)
    override fun `as`(alias: Name): Profiling = Profiling(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Profiling = Profiling(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Profiling = Profiling(name, null)
}
