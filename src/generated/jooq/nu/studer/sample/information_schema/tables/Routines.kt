/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.information_schema.tables


import java.time.LocalDateTime

import nu.studer.sample.information_schema.InformationSchema

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Routines(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.ROUTINES</code>
         */
        val ROUTINES = Routines()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>information_schema.ROUTINES.SPECIFIC_NAME</code>.
     */
    val SPECIFIC_NAME: TableField<Record, String?> = createField(DSL.name("SPECIFIC_NAME"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.ROUTINES.ROUTINE_CATALOG</code>.
     */
    val ROUTINE_CATALOG: TableField<Record, String?> = createField(DSL.name("ROUTINE_CATALOG"), SQLDataType.VARCHAR(512).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.ROUTINES.ROUTINE_SCHEMA</code>.
     */
    val ROUTINE_SCHEMA: TableField<Record, String?> = createField(DSL.name("ROUTINE_SCHEMA"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.ROUTINES.ROUTINE_NAME</code>.
     */
    val ROUTINE_NAME: TableField<Record, String?> = createField(DSL.name("ROUTINE_NAME"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.ROUTINES.ROUTINE_TYPE</code>.
     */
    val ROUTINE_TYPE: TableField<Record, String?> = createField(DSL.name("ROUTINE_TYPE"), SQLDataType.VARCHAR(9).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.ROUTINES.DATA_TYPE</code>.
     */
    val DATA_TYPE: TableField<Record, String?> = createField(DSL.name("DATA_TYPE"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.ROUTINES.CHARACTER_MAXIMUM_LENGTH</code>.
     */
    val CHARACTER_MAXIMUM_LENGTH: TableField<Record, Int?> = createField(DSL.name("CHARACTER_MAXIMUM_LENGTH"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.ROUTINES.CHARACTER_OCTET_LENGTH</code>.
     */
    val CHARACTER_OCTET_LENGTH: TableField<Record, Int?> = createField(DSL.name("CHARACTER_OCTET_LENGTH"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.ROUTINES.NUMERIC_PRECISION</code>.
     */
    val NUMERIC_PRECISION: TableField<Record, ULong?> = createField(DSL.name("NUMERIC_PRECISION"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>information_schema.ROUTINES.NUMERIC_SCALE</code>.
     */
    val NUMERIC_SCALE: TableField<Record, Int?> = createField(DSL.name("NUMERIC_SCALE"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.ROUTINES.DATETIME_PRECISION</code>.
     */
    val DATETIME_PRECISION: TableField<Record, ULong?> = createField(DSL.name("DATETIME_PRECISION"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>information_schema.ROUTINES.CHARACTER_SET_NAME</code>.
     */
    val CHARACTER_SET_NAME: TableField<Record, String?> = createField(DSL.name("CHARACTER_SET_NAME"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.ROUTINES.COLLATION_NAME</code>.
     */
    val COLLATION_NAME: TableField<Record, String?> = createField(DSL.name("COLLATION_NAME"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.ROUTINES.DTD_IDENTIFIER</code>.
     */
    val DTD_IDENTIFIER: TableField<Record, String?> = createField(DSL.name("DTD_IDENTIFIER"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>information_schema.ROUTINES.ROUTINE_BODY</code>.
     */
    val ROUTINE_BODY: TableField<Record, String?> = createField(DSL.name("ROUTINE_BODY"), SQLDataType.VARCHAR(8).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.ROUTINES.ROUTINE_DEFINITION</code>.
     */
    val ROUTINE_DEFINITION: TableField<Record, String?> = createField(DSL.name("ROUTINE_DEFINITION"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>information_schema.ROUTINES.EXTERNAL_NAME</code>.
     */
    val EXTERNAL_NAME: TableField<Record, String?> = createField(DSL.name("EXTERNAL_NAME"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.ROUTINES.EXTERNAL_LANGUAGE</code>.
     */
    val EXTERNAL_LANGUAGE: TableField<Record, String?> = createField(DSL.name("EXTERNAL_LANGUAGE"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.ROUTINES.PARAMETER_STYLE</code>.
     */
    val PARAMETER_STYLE: TableField<Record, String?> = createField(DSL.name("PARAMETER_STYLE"), SQLDataType.VARCHAR(8).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.ROUTINES.IS_DETERMINISTIC</code>.
     */
    val IS_DETERMINISTIC: TableField<Record, String?> = createField(DSL.name("IS_DETERMINISTIC"), SQLDataType.VARCHAR(3).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.ROUTINES.SQL_DATA_ACCESS</code>.
     */
    val SQL_DATA_ACCESS: TableField<Record, String?> = createField(DSL.name("SQL_DATA_ACCESS"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.ROUTINES.SQL_PATH</code>.
     */
    val SQL_PATH: TableField<Record, String?> = createField(DSL.name("SQL_PATH"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.ROUTINES.SECURITY_TYPE</code>.
     */
    val SECURITY_TYPE: TableField<Record, String?> = createField(DSL.name("SECURITY_TYPE"), SQLDataType.VARCHAR(7).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.ROUTINES.CREATED</code>.
     */
    val CREATED: TableField<Record, LocalDateTime?> = createField(DSL.name("CREATED"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>information_schema.ROUTINES.LAST_ALTERED</code>.
     */
    val LAST_ALTERED: TableField<Record, LocalDateTime?> = createField(DSL.name("LAST_ALTERED"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>information_schema.ROUTINES.SQL_MODE</code>.
     */
    val SQL_MODE: TableField<Record, String?> = createField(DSL.name("SQL_MODE"), SQLDataType.VARCHAR(8192).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.ROUTINES.ROUTINE_COMMENT</code>.
     */
    val ROUTINE_COMMENT: TableField<Record, String?> = createField(DSL.name("ROUTINE_COMMENT"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>information_schema.ROUTINES.DEFINER</code>.
     */
    val DEFINER: TableField<Record, String?> = createField(DSL.name("DEFINER"), SQLDataType.VARCHAR(93).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.ROUTINES.CHARACTER_SET_CLIENT</code>.
     */
    val CHARACTER_SET_CLIENT: TableField<Record, String?> = createField(DSL.name("CHARACTER_SET_CLIENT"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.ROUTINES.COLLATION_CONNECTION</code>.
     */
    val COLLATION_CONNECTION: TableField<Record, String?> = createField(DSL.name("COLLATION_CONNECTION"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.ROUTINES.DATABASE_COLLATION</code>.
     */
    val DATABASE_COLLATION: TableField<Record, String?> = createField(DSL.name("DATABASE_COLLATION"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.ROUTINES</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.ROUTINES</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.ROUTINES</code> table reference
     */
    constructor(): this(DSL.name("ROUTINES"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, ROUTINES, null)
    override fun getSchema(): Schema = InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Routines = Routines(DSL.name(alias), this)
    override fun `as`(alias: Name): Routines = Routines(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Routines = Routines(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Routines = Routines(name, null)
}
