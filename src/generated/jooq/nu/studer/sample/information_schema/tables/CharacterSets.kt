/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.information_schema.tables


import nu.studer.sample.information_schema.InformationSchema

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CharacterSets(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.CHARACTER_SETS</code>
         */
        val CHARACTER_SETS = CharacterSets()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>information_schema.CHARACTER_SETS.CHARACTER_SET_NAME</code>.
     */
    val CHARACTER_SET_NAME: TableField<Record, String?> = createField(DSL.name("CHARACTER_SET_NAME"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.CHARACTER_SETS.DEFAULT_COLLATE_NAME</code>.
     */
    val DEFAULT_COLLATE_NAME: TableField<Record, String?> = createField(DSL.name("DEFAULT_COLLATE_NAME"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.CHARACTER_SETS.DESCRIPTION</code>.
     */
    val DESCRIPTION: TableField<Record, String?> = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(60).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.CHARACTER_SETS.MAXLEN</code>.
     */
    val MAXLEN: TableField<Record, Long?> = createField(DSL.name("MAXLEN"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.CHARACTER_SETS</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.CHARACTER_SETS</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.CHARACTER_SETS</code> table reference
     */
    constructor(): this(DSL.name("CHARACTER_SETS"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, CHARACTER_SETS, null)
    override fun getSchema(): Schema = InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): CharacterSets = CharacterSets(DSL.name(alias), this)
    override fun `as`(alias: Name): CharacterSets = CharacterSets(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): CharacterSets = CharacterSets(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): CharacterSets = CharacterSets(name, null)
}
