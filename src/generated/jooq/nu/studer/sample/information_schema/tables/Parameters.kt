/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.information_schema.tables


import nu.studer.sample.information_schema.InformationSchema

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Parameters(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.PARAMETERS</code>
         */
        val PARAMETERS = Parameters()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>information_schema.PARAMETERS.SPECIFIC_CATALOG</code>.
     */
    val SPECIFIC_CATALOG: TableField<Record, String?> = createField(DSL.name("SPECIFIC_CATALOG"), SQLDataType.VARCHAR(512).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.PARAMETERS.SPECIFIC_SCHEMA</code>.
     */
    val SPECIFIC_SCHEMA: TableField<Record, String?> = createField(DSL.name("SPECIFIC_SCHEMA"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.PARAMETERS.SPECIFIC_NAME</code>.
     */
    val SPECIFIC_NAME: TableField<Record, String?> = createField(DSL.name("SPECIFIC_NAME"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.PARAMETERS.ORDINAL_POSITION</code>.
     */
    val ORDINAL_POSITION: TableField<Record, Int?> = createField(DSL.name("ORDINAL_POSITION"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>information_schema.PARAMETERS.PARAMETER_MODE</code>.
     */
    val PARAMETER_MODE: TableField<Record, String?> = createField(DSL.name("PARAMETER_MODE"), SQLDataType.VARCHAR(5), this, "")

    /**
     * The column <code>information_schema.PARAMETERS.PARAMETER_NAME</code>.
     */
    val PARAMETER_NAME: TableField<Record, String?> = createField(DSL.name("PARAMETER_NAME"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.PARAMETERS.DATA_TYPE</code>.
     */
    val DATA_TYPE: TableField<Record, String?> = createField(DSL.name("DATA_TYPE"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.PARAMETERS.CHARACTER_MAXIMUM_LENGTH</code>.
     */
    val CHARACTER_MAXIMUM_LENGTH: TableField<Record, Int?> = createField(DSL.name("CHARACTER_MAXIMUM_LENGTH"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.PARAMETERS.CHARACTER_OCTET_LENGTH</code>.
     */
    val CHARACTER_OCTET_LENGTH: TableField<Record, Int?> = createField(DSL.name("CHARACTER_OCTET_LENGTH"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.PARAMETERS.NUMERIC_PRECISION</code>.
     */
    val NUMERIC_PRECISION: TableField<Record, ULong?> = createField(DSL.name("NUMERIC_PRECISION"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>information_schema.PARAMETERS.NUMERIC_SCALE</code>.
     */
    val NUMERIC_SCALE: TableField<Record, Int?> = createField(DSL.name("NUMERIC_SCALE"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.PARAMETERS.DATETIME_PRECISION</code>.
     */
    val DATETIME_PRECISION: TableField<Record, ULong?> = createField(DSL.name("DATETIME_PRECISION"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>information_schema.PARAMETERS.CHARACTER_SET_NAME</code>.
     */
    val CHARACTER_SET_NAME: TableField<Record, String?> = createField(DSL.name("CHARACTER_SET_NAME"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.PARAMETERS.COLLATION_NAME</code>.
     */
    val COLLATION_NAME: TableField<Record, String?> = createField(DSL.name("COLLATION_NAME"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.PARAMETERS.DTD_IDENTIFIER</code>.
     */
    val DTD_IDENTIFIER: TableField<Record, String?> = createField(DSL.name("DTD_IDENTIFIER"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>information_schema.PARAMETERS.ROUTINE_TYPE</code>.
     */
    val ROUTINE_TYPE: TableField<Record, String?> = createField(DSL.name("ROUTINE_TYPE"), SQLDataType.VARCHAR(9).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.PARAMETERS</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.PARAMETERS</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.PARAMETERS</code> table reference
     */
    constructor(): this(DSL.name("PARAMETERS"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PARAMETERS, null)
    override fun getSchema(): Schema = InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Parameters = Parameters(DSL.name(alias), this)
    override fun `as`(alias: Name): Parameters = Parameters(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Parameters = Parameters(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Parameters = Parameters(name, null)
}
