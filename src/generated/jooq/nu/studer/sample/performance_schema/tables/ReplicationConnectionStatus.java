/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.performance_schema.tables;


import java.time.LocalDateTime;

import nu.studer.sample.performance_schema.PerformanceSchema;
import nu.studer.sample.performance_schema.enums.ReplicationConnectionStatusServiceState;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReplicationConnectionStatus extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>performance_schema.replication_connection_status</code>
     */
    public static final ReplicationConnectionStatus REPLICATION_CONNECTION_STATUS = new ReplicationConnectionStatus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>performance_schema.replication_connection_status.CHANNEL_NAME</code>.
     */
    public final TableField<Record, String> CHANNEL_NAME = createField(DSL.name("CHANNEL_NAME"), SQLDataType.CHAR(64).nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_connection_status.GROUP_NAME</code>.
     */
    public final TableField<Record, String> GROUP_NAME = createField(DSL.name("GROUP_NAME"), SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_connection_status.SOURCE_UUID</code>.
     */
    public final TableField<Record, String> SOURCE_UUID = createField(DSL.name("SOURCE_UUID"), SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_connection_status.THREAD_ID</code>.
     */
    public final TableField<Record, ULong> THREAD_ID = createField(DSL.name("THREAD_ID"), SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>performance_schema.replication_connection_status.SERVICE_STATE</code>.
     */
    public final TableField<Record, ReplicationConnectionStatusServiceState> SERVICE_STATE = createField(DSL.name("SERVICE_STATE"), SQLDataType.VARCHAR(10).nullable(false).asEnumDataType(nu.studer.sample.performance_schema.enums.ReplicationConnectionStatusServiceState.class), this, "");

    /**
     * The column <code>performance_schema.replication_connection_status.COUNT_RECEIVED_HEARTBEATS</code>.
     */
    public final TableField<Record, ULong> COUNT_RECEIVED_HEARTBEATS = createField(DSL.name("COUNT_RECEIVED_HEARTBEATS"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>performance_schema.replication_connection_status.LAST_HEARTBEAT_TIMESTAMP</code>. Shows when the most recent heartbeat signal was received.
     */
    public final TableField<Record, LocalDateTime> LAST_HEARTBEAT_TIMESTAMP = createField(DSL.name("LAST_HEARTBEAT_TIMESTAMP"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "Shows when the most recent heartbeat signal was received.");

    /**
     * The column <code>performance_schema.replication_connection_status.RECEIVED_TRANSACTION_SET</code>.
     */
    public final TableField<Record, String> RECEIVED_TRANSACTION_SET = createField(DSL.name("RECEIVED_TRANSACTION_SET"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_connection_status.LAST_ERROR_NUMBER</code>.
     */
    public final TableField<Record, Integer> LAST_ERROR_NUMBER = createField(DSL.name("LAST_ERROR_NUMBER"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_connection_status.LAST_ERROR_MESSAGE</code>.
     */
    public final TableField<Record, String> LAST_ERROR_MESSAGE = createField(DSL.name("LAST_ERROR_MESSAGE"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_connection_status.LAST_ERROR_TIMESTAMP</code>.
     */
    public final TableField<Record, LocalDateTime> LAST_ERROR_TIMESTAMP = createField(DSL.name("LAST_ERROR_TIMESTAMP"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.LOCALDATETIME)), this, "");

    private ReplicationConnectionStatus(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private ReplicationConnectionStatus(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>performance_schema.replication_connection_status</code> table reference
     */
    public ReplicationConnectionStatus(String alias) {
        this(DSL.name(alias), REPLICATION_CONNECTION_STATUS);
    }

    /**
     * Create an aliased <code>performance_schema.replication_connection_status</code> table reference
     */
    public ReplicationConnectionStatus(Name alias) {
        this(alias, REPLICATION_CONNECTION_STATUS);
    }

    /**
     * Create a <code>performance_schema.replication_connection_status</code> table reference
     */
    public ReplicationConnectionStatus() {
        this(DSL.name("replication_connection_status"), null);
    }

    public <O extends Record> ReplicationConnectionStatus(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, REPLICATION_CONNECTION_STATUS);
    }

    @Override
    public Schema getSchema() {
        return PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public ReplicationConnectionStatus as(String alias) {
        return new ReplicationConnectionStatus(DSL.name(alias), this);
    }

    @Override
    public ReplicationConnectionStatus as(Name alias) {
        return new ReplicationConnectionStatus(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReplicationConnectionStatus rename(String name) {
        return new ReplicationConnectionStatus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReplicationConnectionStatus rename(Name name) {
        return new ReplicationConnectionStatus(name, null);
    }
}
