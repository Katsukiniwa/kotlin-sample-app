/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.performance_schema.tables


import nu.studer.sample.performance_schema.PerformanceSchema
import nu.studer.sample.performance_schema.enums.ThreadsHistory
import nu.studer.sample.performance_schema.enums.ThreadsInstrumented

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Threads(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PerformanceSchema.PERFORMANCE_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>performance_schema.threads</code>
         */
        val THREADS = Threads()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>performance_schema.threads.THREAD_ID</code>.
     */
    val THREAD_ID: TableField<Record, ULong?> = createField(DSL.name("THREAD_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>performance_schema.threads.NAME</code>.
     */
    val NAME: TableField<Record, String?> = createField(DSL.name("NAME"), SQLDataType.VARCHAR(128).nullable(false), this, "")

    /**
     * The column <code>performance_schema.threads.TYPE</code>.
     */
    val TYPE: TableField<Record, String?> = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(10).nullable(false), this, "")

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_ID</code>.
     */
    val PROCESSLIST_ID: TableField<Record, ULong?> = createField(DSL.name("PROCESSLIST_ID"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_USER</code>.
     */
    val PROCESSLIST_USER: TableField<Record, String?> = createField(DSL.name("PROCESSLIST_USER"), SQLDataType.VARCHAR(32), this, "")

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_HOST</code>.
     */
    val PROCESSLIST_HOST: TableField<Record, String?> = createField(DSL.name("PROCESSLIST_HOST"), SQLDataType.VARCHAR(60), this, "")

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_DB</code>.
     */
    val PROCESSLIST_DB: TableField<Record, String?> = createField(DSL.name("PROCESSLIST_DB"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_COMMAND</code>.
     */
    val PROCESSLIST_COMMAND: TableField<Record, String?> = createField(DSL.name("PROCESSLIST_COMMAND"), SQLDataType.VARCHAR(16), this, "")

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_TIME</code>.
     */
    val PROCESSLIST_TIME: TableField<Record, Long?> = createField(DSL.name("PROCESSLIST_TIME"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_STATE</code>.
     */
    val PROCESSLIST_STATE: TableField<Record, String?> = createField(DSL.name("PROCESSLIST_STATE"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_INFO</code>.
     */
    val PROCESSLIST_INFO: TableField<Record, String?> = createField(DSL.name("PROCESSLIST_INFO"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>performance_schema.threads.PARENT_THREAD_ID</code>.
     */
    val PARENT_THREAD_ID: TableField<Record, ULong?> = createField(DSL.name("PARENT_THREAD_ID"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.threads.ROLE</code>.
     */
    val ROLE: TableField<Record, String?> = createField(DSL.name("ROLE"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>performance_schema.threads.INSTRUMENTED</code>.
     */
    val INSTRUMENTED: TableField<Record, ThreadsInstrumented?> = createField(DSL.name("INSTRUMENTED"), SQLDataType.VARCHAR(3).nullable(false).asEnumDataType(nu.studer.sample.performance_schema.enums.ThreadsInstrumented::class.java), this, "")

    /**
     * The column <code>performance_schema.threads.HISTORY</code>.
     */
    val HISTORY: TableField<Record, ThreadsHistory?> = createField(DSL.name("HISTORY"), SQLDataType.VARCHAR(3).nullable(false).asEnumDataType(nu.studer.sample.performance_schema.enums.ThreadsHistory::class.java), this, "")

    /**
     * The column <code>performance_schema.threads.CONNECTION_TYPE</code>.
     */
    val CONNECTION_TYPE: TableField<Record, String?> = createField(DSL.name("CONNECTION_TYPE"), SQLDataType.VARCHAR(16), this, "")

    /**
     * The column <code>performance_schema.threads.THREAD_OS_ID</code>.
     */
    val THREAD_OS_ID: TableField<Record, ULong?> = createField(DSL.name("THREAD_OS_ID"), SQLDataType.BIGINTUNSIGNED, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>performance_schema.threads</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>performance_schema.threads</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>performance_schema.threads</code> table reference
     */
    constructor(): this(DSL.name("threads"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, THREADS, null)
    override fun getSchema(): Schema = PerformanceSchema.PERFORMANCE_SCHEMA
    override fun `as`(alias: String): Threads = Threads(DSL.name(alias), this)
    override fun `as`(alias: Name): Threads = Threads(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Threads = Threads(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Threads = Threads(name, null)
}
