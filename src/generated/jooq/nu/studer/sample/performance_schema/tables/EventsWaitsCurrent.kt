/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.performance_schema.tables


import nu.studer.sample.performance_schema.PerformanceSchema
import nu.studer.sample.performance_schema.enums.EventsWaitsCurrentNestingEventType

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UInteger
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class EventsWaitsCurrent(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PerformanceSchema.PERFORMANCE_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>performance_schema.events_waits_current</code>
         */
        val EVENTS_WAITS_CURRENT = EventsWaitsCurrent()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>performance_schema.events_waits_current.THREAD_ID</code>.
     */
    val THREAD_ID: TableField<Record, ULong?> = createField(DSL.name("THREAD_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>performance_schema.events_waits_current.EVENT_ID</code>.
     */
    val EVENT_ID: TableField<Record, ULong?> = createField(DSL.name("EVENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>performance_schema.events_waits_current.END_EVENT_ID</code>.
     */
    val END_EVENT_ID: TableField<Record, ULong?> = createField(DSL.name("END_EVENT_ID"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.events_waits_current.EVENT_NAME</code>.
     */
    val EVENT_NAME: TableField<Record, String?> = createField(DSL.name("EVENT_NAME"), SQLDataType.VARCHAR(128).nullable(false), this, "")

    /**
     * The column <code>performance_schema.events_waits_current.SOURCE</code>.
     */
    val SOURCE: TableField<Record, String?> = createField(DSL.name("SOURCE"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>performance_schema.events_waits_current.TIMER_START</code>.
     */
    val TIMER_START: TableField<Record, ULong?> = createField(DSL.name("TIMER_START"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.events_waits_current.TIMER_END</code>.
     */
    val TIMER_END: TableField<Record, ULong?> = createField(DSL.name("TIMER_END"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.events_waits_current.TIMER_WAIT</code>.
     */
    val TIMER_WAIT: TableField<Record, ULong?> = createField(DSL.name("TIMER_WAIT"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.events_waits_current.SPINS</code>.
     */
    val SPINS: TableField<Record, UInteger?> = createField(DSL.name("SPINS"), SQLDataType.INTEGERUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.events_waits_current.OBJECT_SCHEMA</code>.
     */
    val OBJECT_SCHEMA: TableField<Record, String?> = createField(DSL.name("OBJECT_SCHEMA"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>performance_schema.events_waits_current.OBJECT_NAME</code>.
     */
    val OBJECT_NAME: TableField<Record, String?> = createField(DSL.name("OBJECT_NAME"), SQLDataType.VARCHAR(512), this, "")

    /**
     * The column <code>performance_schema.events_waits_current.INDEX_NAME</code>.
     */
    val INDEX_NAME: TableField<Record, String?> = createField(DSL.name("INDEX_NAME"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>performance_schema.events_waits_current.OBJECT_TYPE</code>.
     */
    val OBJECT_TYPE: TableField<Record, String?> = createField(DSL.name("OBJECT_TYPE"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>performance_schema.events_waits_current.OBJECT_INSTANCE_BEGIN</code>.
     */
    val OBJECT_INSTANCE_BEGIN: TableField<Record, ULong?> = createField(DSL.name("OBJECT_INSTANCE_BEGIN"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>performance_schema.events_waits_current.NESTING_EVENT_ID</code>.
     */
    val NESTING_EVENT_ID: TableField<Record, ULong?> = createField(DSL.name("NESTING_EVENT_ID"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.events_waits_current.NESTING_EVENT_TYPE</code>.
     */
    val NESTING_EVENT_TYPE: TableField<Record, EventsWaitsCurrentNestingEventType?> = createField(DSL.name("NESTING_EVENT_TYPE"), SQLDataType.VARCHAR(11).asEnumDataType(nu.studer.sample.performance_schema.enums.EventsWaitsCurrentNestingEventType::class.java), this, "")

    /**
     * The column <code>performance_schema.events_waits_current.OPERATION</code>.
     */
    val OPERATION: TableField<Record, String?> = createField(DSL.name("OPERATION"), SQLDataType.VARCHAR(32).nullable(false), this, "")

    /**
     * The column <code>performance_schema.events_waits_current.NUMBER_OF_BYTES</code>.
     */
    val NUMBER_OF_BYTES: TableField<Record, Long?> = createField(DSL.name("NUMBER_OF_BYTES"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>performance_schema.events_waits_current.FLAGS</code>.
     */
    val FLAGS: TableField<Record, UInteger?> = createField(DSL.name("FLAGS"), SQLDataType.INTEGERUNSIGNED, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>performance_schema.events_waits_current</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>performance_schema.events_waits_current</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>performance_schema.events_waits_current</code> table reference
     */
    constructor(): this(DSL.name("events_waits_current"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, EVENTS_WAITS_CURRENT, null)
    override fun getSchema(): Schema = PerformanceSchema.PERFORMANCE_SCHEMA
    override fun `as`(alias: String): EventsWaitsCurrent = EventsWaitsCurrent(DSL.name(alias), this)
    override fun `as`(alias: Name): EventsWaitsCurrent = EventsWaitsCurrent(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): EventsWaitsCurrent = EventsWaitsCurrent(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): EventsWaitsCurrent = EventsWaitsCurrent(name, null)
}
