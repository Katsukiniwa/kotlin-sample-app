/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.performance_schema.tables


import nu.studer.sample.performance_schema.PerformanceSchema
import nu.studer.sample.performance_schema.enums.ReplicationConnectionConfigurationAutoPosition
import nu.studer.sample.performance_schema.enums.ReplicationConnectionConfigurationSslAllowed
import nu.studer.sample.performance_schema.enums.ReplicationConnectionConfigurationSslVerifyServerCertificate

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ReplicationConnectionConfiguration(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PerformanceSchema.PERFORMANCE_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>performance_schema.replication_connection_configuration</code>
         */
        val REPLICATION_CONNECTION_CONFIGURATION = ReplicationConnectionConfiguration()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>performance_schema.replication_connection_configuration.CHANNEL_NAME</code>.
     */
    val CHANNEL_NAME: TableField<Record, String?> = createField(DSL.name("CHANNEL_NAME"), SQLDataType.CHAR(64).nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_connection_configuration.HOST</code>.
     */
    val HOST: TableField<Record, String?> = createField(DSL.name("HOST"), SQLDataType.CHAR(60).nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_connection_configuration.PORT</code>.
     */
    val PORT: TableField<Record, Int?> = createField(DSL.name("PORT"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_connection_configuration.USER</code>.
     */
    val USER: TableField<Record, String?> = createField(DSL.name("USER"), SQLDataType.CHAR(32).nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_connection_configuration.NETWORK_INTERFACE</code>.
     */
    val NETWORK_INTERFACE: TableField<Record, String?> = createField(DSL.name("NETWORK_INTERFACE"), SQLDataType.CHAR(60).nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_connection_configuration.AUTO_POSITION</code>.
     */
    val AUTO_POSITION: TableField<Record, ReplicationConnectionConfigurationAutoPosition?> = createField(DSL.name("AUTO_POSITION"), SQLDataType.VARCHAR(1).nullable(false).asEnumDataType(nu.studer.sample.performance_schema.enums.ReplicationConnectionConfigurationAutoPosition::class.java), this, "")

    /**
     * The column <code>performance_schema.replication_connection_configuration.SSL_ALLOWED</code>.
     */
    val SSL_ALLOWED: TableField<Record, ReplicationConnectionConfigurationSslAllowed?> = createField(DSL.name("SSL_ALLOWED"), SQLDataType.VARCHAR(7).nullable(false).asEnumDataType(nu.studer.sample.performance_schema.enums.ReplicationConnectionConfigurationSslAllowed::class.java), this, "")

    /**
     * The column <code>performance_schema.replication_connection_configuration.SSL_CA_FILE</code>.
     */
    val SSL_CA_FILE: TableField<Record, String?> = createField(DSL.name("SSL_CA_FILE"), SQLDataType.VARCHAR(512).nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_connection_configuration.SSL_CA_PATH</code>.
     */
    val SSL_CA_PATH: TableField<Record, String?> = createField(DSL.name("SSL_CA_PATH"), SQLDataType.VARCHAR(512).nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_connection_configuration.SSL_CERTIFICATE</code>.
     */
    val SSL_CERTIFICATE: TableField<Record, String?> = createField(DSL.name("SSL_CERTIFICATE"), SQLDataType.VARCHAR(512).nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_connection_configuration.SSL_CIPHER</code>.
     */
    val SSL_CIPHER: TableField<Record, String?> = createField(DSL.name("SSL_CIPHER"), SQLDataType.VARCHAR(512).nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_connection_configuration.SSL_KEY</code>.
     */
    val SSL_KEY: TableField<Record, String?> = createField(DSL.name("SSL_KEY"), SQLDataType.VARCHAR(512).nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_connection_configuration.SSL_VERIFY_SERVER_CERTIFICATE</code>.
     */
    val SSL_VERIFY_SERVER_CERTIFICATE: TableField<Record, ReplicationConnectionConfigurationSslVerifyServerCertificate?> = createField(DSL.name("SSL_VERIFY_SERVER_CERTIFICATE"), SQLDataType.VARCHAR(3).nullable(false).asEnumDataType(nu.studer.sample.performance_schema.enums.ReplicationConnectionConfigurationSslVerifyServerCertificate::class.java), this, "")

    /**
     * The column <code>performance_schema.replication_connection_configuration.SSL_CRL_FILE</code>.
     */
    val SSL_CRL_FILE: TableField<Record, String?> = createField(DSL.name("SSL_CRL_FILE"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_connection_configuration.SSL_CRL_PATH</code>.
     */
    val SSL_CRL_PATH: TableField<Record, String?> = createField(DSL.name("SSL_CRL_PATH"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_connection_configuration.CONNECTION_RETRY_INTERVAL</code>.
     */
    val CONNECTION_RETRY_INTERVAL: TableField<Record, Int?> = createField(DSL.name("CONNECTION_RETRY_INTERVAL"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_connection_configuration.CONNECTION_RETRY_COUNT</code>.
     */
    val CONNECTION_RETRY_COUNT: TableField<Record, ULong?> = createField(DSL.name("CONNECTION_RETRY_COUNT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_connection_configuration.HEARTBEAT_INTERVAL</code>. Number of seconds after which a heartbeat will be sent .
     */
    val HEARTBEAT_INTERVAL: TableField<Record, Double?> = createField(DSL.name("HEARTBEAT_INTERVAL"), SQLDataType.DOUBLE.nullable(false), this, "Number of seconds after which a heartbeat will be sent .")

    /**
     * The column <code>performance_schema.replication_connection_configuration.TLS_VERSION</code>.
     */
    val TLS_VERSION: TableField<Record, String?> = createField(DSL.name("TLS_VERSION"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>performance_schema.replication_connection_configuration</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>performance_schema.replication_connection_configuration</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>performance_schema.replication_connection_configuration</code> table reference
     */
    constructor(): this(DSL.name("replication_connection_configuration"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, REPLICATION_CONNECTION_CONFIGURATION, null)
    override fun getSchema(): Schema = PerformanceSchema.PERFORMANCE_SCHEMA
    override fun `as`(alias: String): ReplicationConnectionConfiguration = ReplicationConnectionConfiguration(DSL.name(alias), this)
    override fun `as`(alias: Name): ReplicationConnectionConfiguration = ReplicationConnectionConfiguration(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ReplicationConnectionConfiguration = ReplicationConnectionConfiguration(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ReplicationConnectionConfiguration = ReplicationConnectionConfiguration(name, null)
}
