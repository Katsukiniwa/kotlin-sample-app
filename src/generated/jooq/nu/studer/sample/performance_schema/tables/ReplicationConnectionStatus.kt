/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.performance_schema.tables


import java.time.LocalDateTime

import nu.studer.sample.performance_schema.PerformanceSchema
import nu.studer.sample.performance_schema.enums.ReplicationConnectionStatusServiceState

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ReplicationConnectionStatus(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PerformanceSchema.PERFORMANCE_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>performance_schema.replication_connection_status</code>
         */
        val REPLICATION_CONNECTION_STATUS = ReplicationConnectionStatus()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>performance_schema.replication_connection_status.CHANNEL_NAME</code>.
     */
    val CHANNEL_NAME: TableField<Record, String?> = createField(DSL.name("CHANNEL_NAME"), SQLDataType.CHAR(64).nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_connection_status.GROUP_NAME</code>.
     */
    val GROUP_NAME: TableField<Record, String?> = createField(DSL.name("GROUP_NAME"), SQLDataType.CHAR(36).nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_connection_status.SOURCE_UUID</code>.
     */
    val SOURCE_UUID: TableField<Record, String?> = createField(DSL.name("SOURCE_UUID"), SQLDataType.CHAR(36).nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_connection_status.THREAD_ID</code>.
     */
    val THREAD_ID: TableField<Record, ULong?> = createField(DSL.name("THREAD_ID"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.replication_connection_status.SERVICE_STATE</code>.
     */
    val SERVICE_STATE: TableField<Record, ReplicationConnectionStatusServiceState?> = createField(DSL.name("SERVICE_STATE"), SQLDataType.VARCHAR(10).nullable(false).asEnumDataType(nu.studer.sample.performance_schema.enums.ReplicationConnectionStatusServiceState::class.java), this, "")

    /**
     * The column <code>performance_schema.replication_connection_status.COUNT_RECEIVED_HEARTBEATS</code>.
     */
    val COUNT_RECEIVED_HEARTBEATS: TableField<Record, ULong?> = createField(DSL.name("COUNT_RECEIVED_HEARTBEATS"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>performance_schema.replication_connection_status.LAST_HEARTBEAT_TIMESTAMP</code>. Shows when the most recent heartbeat signal was received.
     */
    val LAST_HEARTBEAT_TIMESTAMP: TableField<Record, LocalDateTime?> = createField(DSL.name("LAST_HEARTBEAT_TIMESTAMP"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "Shows when the most recent heartbeat signal was received.")

    /**
     * The column <code>performance_schema.replication_connection_status.RECEIVED_TRANSACTION_SET</code>.
     */
    val RECEIVED_TRANSACTION_SET: TableField<Record, String?> = createField(DSL.name("RECEIVED_TRANSACTION_SET"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_connection_status.LAST_ERROR_NUMBER</code>.
     */
    val LAST_ERROR_NUMBER: TableField<Record, Int?> = createField(DSL.name("LAST_ERROR_NUMBER"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_connection_status.LAST_ERROR_MESSAGE</code>.
     */
    val LAST_ERROR_MESSAGE: TableField<Record, String?> = createField(DSL.name("LAST_ERROR_MESSAGE"), SQLDataType.VARCHAR(1024).nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_connection_status.LAST_ERROR_TIMESTAMP</code>.
     */
    val LAST_ERROR_TIMESTAMP: TableField<Record, LocalDateTime?> = createField(DSL.name("LAST_ERROR_TIMESTAMP"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>performance_schema.replication_connection_status</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>performance_schema.replication_connection_status</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>performance_schema.replication_connection_status</code> table reference
     */
    constructor(): this(DSL.name("replication_connection_status"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, REPLICATION_CONNECTION_STATUS, null)
    override fun getSchema(): Schema = PerformanceSchema.PERFORMANCE_SCHEMA
    override fun `as`(alias: String): ReplicationConnectionStatus = ReplicationConnectionStatus(DSL.name(alias), this)
    override fun `as`(alias: Name): ReplicationConnectionStatus = ReplicationConnectionStatus(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ReplicationConnectionStatus = ReplicationConnectionStatus(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ReplicationConnectionStatus = ReplicationConnectionStatus(name, null)
}
