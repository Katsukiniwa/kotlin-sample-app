/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.performance_schema.tables


import java.time.LocalDateTime

import nu.studer.sample.performance_schema.PerformanceSchema
import nu.studer.sample.performance_schema.enums.HostCacheHostValidated

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class HostCache(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PerformanceSchema.PERFORMANCE_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>performance_schema.host_cache</code>
         */
        val HOST_CACHE = HostCache()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>performance_schema.host_cache.IP</code>.
     */
    val IP: TableField<Record, String?> = createField(DSL.name("IP"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>performance_schema.host_cache.HOST</code>.
     */
    val HOST: TableField<Record, String?> = createField(DSL.name("HOST"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>performance_schema.host_cache.HOST_VALIDATED</code>.
     */
    val HOST_VALIDATED: TableField<Record, HostCacheHostValidated?> = createField(DSL.name("HOST_VALIDATED"), SQLDataType.VARCHAR(3).nullable(false).asEnumDataType(nu.studer.sample.performance_schema.enums.HostCacheHostValidated::class.java), this, "")

    /**
     * The column <code>performance_schema.host_cache.SUM_CONNECT_ERRORS</code>.
     */
    val SUM_CONNECT_ERRORS: TableField<Record, Long?> = createField(DSL.name("SUM_CONNECT_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>performance_schema.host_cache.COUNT_HOST_BLOCKED_ERRORS</code>.
     */
    val COUNT_HOST_BLOCKED_ERRORS: TableField<Record, Long?> = createField(DSL.name("COUNT_HOST_BLOCKED_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>performance_schema.host_cache.COUNT_NAMEINFO_TRANSIENT_ERRORS</code>.
     */
    val COUNT_NAMEINFO_TRANSIENT_ERRORS: TableField<Record, Long?> = createField(DSL.name("COUNT_NAMEINFO_TRANSIENT_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>performance_schema.host_cache.COUNT_NAMEINFO_PERMANENT_ERRORS</code>.
     */
    val COUNT_NAMEINFO_PERMANENT_ERRORS: TableField<Record, Long?> = createField(DSL.name("COUNT_NAMEINFO_PERMANENT_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>performance_schema.host_cache.COUNT_FORMAT_ERRORS</code>.
     */
    val COUNT_FORMAT_ERRORS: TableField<Record, Long?> = createField(DSL.name("COUNT_FORMAT_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>performance_schema.host_cache.COUNT_ADDRINFO_TRANSIENT_ERRORS</code>.
     */
    val COUNT_ADDRINFO_TRANSIENT_ERRORS: TableField<Record, Long?> = createField(DSL.name("COUNT_ADDRINFO_TRANSIENT_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>performance_schema.host_cache.COUNT_ADDRINFO_PERMANENT_ERRORS</code>.
     */
    val COUNT_ADDRINFO_PERMANENT_ERRORS: TableField<Record, Long?> = createField(DSL.name("COUNT_ADDRINFO_PERMANENT_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>performance_schema.host_cache.COUNT_FCRDNS_ERRORS</code>.
     */
    val COUNT_FCRDNS_ERRORS: TableField<Record, Long?> = createField(DSL.name("COUNT_FCRDNS_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>performance_schema.host_cache.COUNT_HOST_ACL_ERRORS</code>.
     */
    val COUNT_HOST_ACL_ERRORS: TableField<Record, Long?> = createField(DSL.name("COUNT_HOST_ACL_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>performance_schema.host_cache.COUNT_NO_AUTH_PLUGIN_ERRORS</code>.
     */
    val COUNT_NO_AUTH_PLUGIN_ERRORS: TableField<Record, Long?> = createField(DSL.name("COUNT_NO_AUTH_PLUGIN_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>performance_schema.host_cache.COUNT_AUTH_PLUGIN_ERRORS</code>.
     */
    val COUNT_AUTH_PLUGIN_ERRORS: TableField<Record, Long?> = createField(DSL.name("COUNT_AUTH_PLUGIN_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>performance_schema.host_cache.COUNT_HANDSHAKE_ERRORS</code>.
     */
    val COUNT_HANDSHAKE_ERRORS: TableField<Record, Long?> = createField(DSL.name("COUNT_HANDSHAKE_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>performance_schema.host_cache.COUNT_PROXY_USER_ERRORS</code>.
     */
    val COUNT_PROXY_USER_ERRORS: TableField<Record, Long?> = createField(DSL.name("COUNT_PROXY_USER_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>performance_schema.host_cache.COUNT_PROXY_USER_ACL_ERRORS</code>.
     */
    val COUNT_PROXY_USER_ACL_ERRORS: TableField<Record, Long?> = createField(DSL.name("COUNT_PROXY_USER_ACL_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>performance_schema.host_cache.COUNT_AUTHENTICATION_ERRORS</code>.
     */
    val COUNT_AUTHENTICATION_ERRORS: TableField<Record, Long?> = createField(DSL.name("COUNT_AUTHENTICATION_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>performance_schema.host_cache.COUNT_SSL_ERRORS</code>.
     */
    val COUNT_SSL_ERRORS: TableField<Record, Long?> = createField(DSL.name("COUNT_SSL_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>performance_schema.host_cache.COUNT_MAX_USER_CONNECTIONS_ERRORS</code>.
     */
    val COUNT_MAX_USER_CONNECTIONS_ERRORS: TableField<Record, Long?> = createField(DSL.name("COUNT_MAX_USER_CONNECTIONS_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>performance_schema.host_cache.COUNT_MAX_USER_CONNECTIONS_PER_HOUR_ERRORS</code>.
     */
    val COUNT_MAX_USER_CONNECTIONS_PER_HOUR_ERRORS: TableField<Record, Long?> = createField(DSL.name("COUNT_MAX_USER_CONNECTIONS_PER_HOUR_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>performance_schema.host_cache.COUNT_DEFAULT_DATABASE_ERRORS</code>.
     */
    val COUNT_DEFAULT_DATABASE_ERRORS: TableField<Record, Long?> = createField(DSL.name("COUNT_DEFAULT_DATABASE_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>performance_schema.host_cache.COUNT_INIT_CONNECT_ERRORS</code>.
     */
    val COUNT_INIT_CONNECT_ERRORS: TableField<Record, Long?> = createField(DSL.name("COUNT_INIT_CONNECT_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>performance_schema.host_cache.COUNT_LOCAL_ERRORS</code>.
     */
    val COUNT_LOCAL_ERRORS: TableField<Record, Long?> = createField(DSL.name("COUNT_LOCAL_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>performance_schema.host_cache.COUNT_UNKNOWN_ERRORS</code>.
     */
    val COUNT_UNKNOWN_ERRORS: TableField<Record, Long?> = createField(DSL.name("COUNT_UNKNOWN_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>performance_schema.host_cache.FIRST_SEEN</code>.
     */
    val FIRST_SEEN: TableField<Record, LocalDateTime?> = createField(DSL.name("FIRST_SEEN"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>performance_schema.host_cache.LAST_SEEN</code>.
     */
    val LAST_SEEN: TableField<Record, LocalDateTime?> = createField(DSL.name("LAST_SEEN"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>performance_schema.host_cache.FIRST_ERROR_SEEN</code>.
     */
    val FIRST_ERROR_SEEN: TableField<Record, LocalDateTime?> = createField(DSL.name("FIRST_ERROR_SEEN"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>performance_schema.host_cache.LAST_ERROR_SEEN</code>.
     */
    val LAST_ERROR_SEEN: TableField<Record, LocalDateTime?> = createField(DSL.name("LAST_ERROR_SEEN"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>performance_schema.host_cache</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>performance_schema.host_cache</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>performance_schema.host_cache</code> table reference
     */
    constructor(): this(DSL.name("host_cache"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, HOST_CACHE, null)
    override fun getSchema(): Schema = PerformanceSchema.PERFORMANCE_SCHEMA
    override fun `as`(alias: String): HostCache = HostCache(DSL.name(alias), this)
    override fun `as`(alias: Name): HostCache = HostCache(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): HostCache = HostCache(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): HostCache = HostCache(name, null)
}
