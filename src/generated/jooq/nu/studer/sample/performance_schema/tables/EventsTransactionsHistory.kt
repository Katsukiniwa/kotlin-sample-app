/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.performance_schema.tables


import nu.studer.sample.performance_schema.PerformanceSchema
import nu.studer.sample.performance_schema.enums.EventsTransactionsHistoryAccessMode
import nu.studer.sample.performance_schema.enums.EventsTransactionsHistoryAutocommit
import nu.studer.sample.performance_schema.enums.EventsTransactionsHistoryNestingEventType
import nu.studer.sample.performance_schema.enums.EventsTransactionsHistoryState

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class EventsTransactionsHistory(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PerformanceSchema.PERFORMANCE_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>performance_schema.events_transactions_history</code>
         */
        val EVENTS_TRANSACTIONS_HISTORY = EventsTransactionsHistory()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>performance_schema.events_transactions_history.THREAD_ID</code>.
     */
    val THREAD_ID: TableField<Record, ULong?> = createField(DSL.name("THREAD_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>performance_schema.events_transactions_history.EVENT_ID</code>.
     */
    val EVENT_ID: TableField<Record, ULong?> = createField(DSL.name("EVENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>performance_schema.events_transactions_history.END_EVENT_ID</code>.
     */
    val END_EVENT_ID: TableField<Record, ULong?> = createField(DSL.name("END_EVENT_ID"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.events_transactions_history.EVENT_NAME</code>.
     */
    val EVENT_NAME: TableField<Record, String?> = createField(DSL.name("EVENT_NAME"), SQLDataType.VARCHAR(128).nullable(false), this, "")

    /**
     * The column <code>performance_schema.events_transactions_history.STATE</code>.
     */
    val STATE: TableField<Record, EventsTransactionsHistoryState?> = createField(DSL.name("STATE"), SQLDataType.VARCHAR(11).asEnumDataType(nu.studer.sample.performance_schema.enums.EventsTransactionsHistoryState::class.java), this, "")

    /**
     * The column <code>performance_schema.events_transactions_history.TRX_ID</code>.
     */
    val TRX_ID: TableField<Record, ULong?> = createField(DSL.name("TRX_ID"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.events_transactions_history.GTID</code>.
     */
    val GTID: TableField<Record, String?> = createField(DSL.name("GTID"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>performance_schema.events_transactions_history.XID_FORMAT_ID</code>.
     */
    val XID_FORMAT_ID: TableField<Record, Int?> = createField(DSL.name("XID_FORMAT_ID"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>performance_schema.events_transactions_history.XID_GTRID</code>.
     */
    val XID_GTRID: TableField<Record, String?> = createField(DSL.name("XID_GTRID"), SQLDataType.VARCHAR(130), this, "")

    /**
     * The column <code>performance_schema.events_transactions_history.XID_BQUAL</code>.
     */
    val XID_BQUAL: TableField<Record, String?> = createField(DSL.name("XID_BQUAL"), SQLDataType.VARCHAR(130), this, "")

    /**
     * The column <code>performance_schema.events_transactions_history.XA_STATE</code>.
     */
    val XA_STATE: TableField<Record, String?> = createField(DSL.name("XA_STATE"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>performance_schema.events_transactions_history.SOURCE</code>.
     */
    val SOURCE: TableField<Record, String?> = createField(DSL.name("SOURCE"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>performance_schema.events_transactions_history.TIMER_START</code>.
     */
    val TIMER_START: TableField<Record, ULong?> = createField(DSL.name("TIMER_START"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.events_transactions_history.TIMER_END</code>.
     */
    val TIMER_END: TableField<Record, ULong?> = createField(DSL.name("TIMER_END"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.events_transactions_history.TIMER_WAIT</code>.
     */
    val TIMER_WAIT: TableField<Record, ULong?> = createField(DSL.name("TIMER_WAIT"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.events_transactions_history.ACCESS_MODE</code>.
     */
    val ACCESS_MODE: TableField<Record, EventsTransactionsHistoryAccessMode?> = createField(DSL.name("ACCESS_MODE"), SQLDataType.VARCHAR(10).asEnumDataType(nu.studer.sample.performance_schema.enums.EventsTransactionsHistoryAccessMode::class.java), this, "")

    /**
     * The column <code>performance_schema.events_transactions_history.ISOLATION_LEVEL</code>.
     */
    val ISOLATION_LEVEL: TableField<Record, String?> = createField(DSL.name("ISOLATION_LEVEL"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>performance_schema.events_transactions_history.AUTOCOMMIT</code>.
     */
    val AUTOCOMMIT: TableField<Record, EventsTransactionsHistoryAutocommit?> = createField(DSL.name("AUTOCOMMIT"), SQLDataType.VARCHAR(3).nullable(false).asEnumDataType(nu.studer.sample.performance_schema.enums.EventsTransactionsHistoryAutocommit::class.java), this, "")

    /**
     * The column <code>performance_schema.events_transactions_history.NUMBER_OF_SAVEPOINTS</code>.
     */
    val NUMBER_OF_SAVEPOINTS: TableField<Record, ULong?> = createField(DSL.name("NUMBER_OF_SAVEPOINTS"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.events_transactions_history.NUMBER_OF_ROLLBACK_TO_SAVEPOINT</code>.
     */
    val NUMBER_OF_ROLLBACK_TO_SAVEPOINT: TableField<Record, ULong?> = createField(DSL.name("NUMBER_OF_ROLLBACK_TO_SAVEPOINT"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.events_transactions_history.NUMBER_OF_RELEASE_SAVEPOINT</code>.
     */
    val NUMBER_OF_RELEASE_SAVEPOINT: TableField<Record, ULong?> = createField(DSL.name("NUMBER_OF_RELEASE_SAVEPOINT"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.events_transactions_history.OBJECT_INSTANCE_BEGIN</code>.
     */
    val OBJECT_INSTANCE_BEGIN: TableField<Record, ULong?> = createField(DSL.name("OBJECT_INSTANCE_BEGIN"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.events_transactions_history.NESTING_EVENT_ID</code>.
     */
    val NESTING_EVENT_ID: TableField<Record, ULong?> = createField(DSL.name("NESTING_EVENT_ID"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.events_transactions_history.NESTING_EVENT_TYPE</code>.
     */
    val NESTING_EVENT_TYPE: TableField<Record, EventsTransactionsHistoryNestingEventType?> = createField(DSL.name("NESTING_EVENT_TYPE"), SQLDataType.VARCHAR(11).asEnumDataType(nu.studer.sample.performance_schema.enums.EventsTransactionsHistoryNestingEventType::class.java), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>performance_schema.events_transactions_history</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>performance_schema.events_transactions_history</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>performance_schema.events_transactions_history</code> table reference
     */
    constructor(): this(DSL.name("events_transactions_history"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, EVENTS_TRANSACTIONS_HISTORY, null)
    override fun getSchema(): Schema = PerformanceSchema.PERFORMANCE_SCHEMA
    override fun `as`(alias: String): EventsTransactionsHistory = EventsTransactionsHistory(DSL.name(alias), this)
    override fun `as`(alias: Name): EventsTransactionsHistory = EventsTransactionsHistory(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): EventsTransactionsHistory = EventsTransactionsHistory(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): EventsTransactionsHistory = EventsTransactionsHistory(name, null)
}
