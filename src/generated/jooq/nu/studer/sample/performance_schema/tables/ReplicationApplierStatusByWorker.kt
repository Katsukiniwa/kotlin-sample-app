/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.performance_schema.tables


import java.time.LocalDateTime

import nu.studer.sample.performance_schema.PerformanceSchema
import nu.studer.sample.performance_schema.enums.ReplicationApplierStatusByWorkerServiceState

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ReplicationApplierStatusByWorker(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PerformanceSchema.PERFORMANCE_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>performance_schema.replication_applier_status_by_worker</code>
         */
        val REPLICATION_APPLIER_STATUS_BY_WORKER = ReplicationApplierStatusByWorker()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>performance_schema.replication_applier_status_by_worker.CHANNEL_NAME</code>.
     */
    val CHANNEL_NAME: TableField<Record, String?> = createField(DSL.name("CHANNEL_NAME"), SQLDataType.CHAR(64).nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_applier_status_by_worker.WORKER_ID</code>.
     */
    val WORKER_ID: TableField<Record, ULong?> = createField(DSL.name("WORKER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_applier_status_by_worker.THREAD_ID</code>.
     */
    val THREAD_ID: TableField<Record, ULong?> = createField(DSL.name("THREAD_ID"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.replication_applier_status_by_worker.SERVICE_STATE</code>.
     */
    val SERVICE_STATE: TableField<Record, ReplicationApplierStatusByWorkerServiceState?> = createField(DSL.name("SERVICE_STATE"), SQLDataType.VARCHAR(3).nullable(false).asEnumDataType(nu.studer.sample.performance_schema.enums.ReplicationApplierStatusByWorkerServiceState::class.java), this, "")

    /**
     * The column <code>performance_schema.replication_applier_status_by_worker.LAST_SEEN_TRANSACTION</code>.
     */
    val LAST_SEEN_TRANSACTION: TableField<Record, String?> = createField(DSL.name("LAST_SEEN_TRANSACTION"), SQLDataType.CHAR(57).nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_applier_status_by_worker.LAST_ERROR_NUMBER</code>.
     */
    val LAST_ERROR_NUMBER: TableField<Record, Int?> = createField(DSL.name("LAST_ERROR_NUMBER"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_applier_status_by_worker.LAST_ERROR_MESSAGE</code>.
     */
    val LAST_ERROR_MESSAGE: TableField<Record, String?> = createField(DSL.name("LAST_ERROR_MESSAGE"), SQLDataType.VARCHAR(1024).nullable(false), this, "")

    /**
     * The column <code>performance_schema.replication_applier_status_by_worker.LAST_ERROR_TIMESTAMP</code>.
     */
    val LAST_ERROR_TIMESTAMP: TableField<Record, LocalDateTime?> = createField(DSL.name("LAST_ERROR_TIMESTAMP"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>performance_schema.replication_applier_status_by_worker</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>performance_schema.replication_applier_status_by_worker</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>performance_schema.replication_applier_status_by_worker</code> table reference
     */
    constructor(): this(DSL.name("replication_applier_status_by_worker"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, REPLICATION_APPLIER_STATUS_BY_WORKER, null)
    override fun getSchema(): Schema = PerformanceSchema.PERFORMANCE_SCHEMA
    override fun `as`(alias: String): ReplicationApplierStatusByWorker = ReplicationApplierStatusByWorker(DSL.name(alias), this)
    override fun `as`(alias: Name): ReplicationApplierStatusByWorker = ReplicationApplierStatusByWorker(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ReplicationApplierStatusByWorker = ReplicationApplierStatusByWorker(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ReplicationApplierStatusByWorker = ReplicationApplierStatusByWorker(name, null)
}
