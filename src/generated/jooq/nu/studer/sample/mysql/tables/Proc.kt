/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.mysql.tables


import java.time.LocalDateTime

import kotlin.collections.List

import nu.studer.sample.mysql.Mysql
import nu.studer.sample.mysql.enums.ProcIsDeterministic
import nu.studer.sample.mysql.enums.ProcLanguage
import nu.studer.sample.mysql.enums.ProcSecurityType
import nu.studer.sample.mysql.enums.ProcSqlDataAccess
import nu.studer.sample.mysql.enums.ProcType
import nu.studer.sample.mysql.keys.KEY_PROC_PRIMARY

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * Stored Procedures
 */
@Suppress("UNCHECKED_CAST")
open class Proc(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Mysql.MYSQL,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("Stored Procedures"),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>mysql.proc</code>
         */
        val PROC = Proc()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>mysql.proc.db</code>.
     */
    val DB: TableField<Record, String?> = createField(DSL.name("db"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "")

    /**
     * The column <code>mysql.proc.name</code>.
     */
    val NAME: TableField<Record, String?> = createField(DSL.name("name"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "")

    /**
     * The column <code>mysql.proc.type</code>.
     */
    val TYPE: TableField<Record, ProcType?> = createField(DSL.name("type"), SQLDataType.VARCHAR(9).nullable(false).asEnumDataType(nu.studer.sample.mysql.enums.ProcType::class.java), this, "")

    /**
     * The column <code>mysql.proc.specific_name</code>.
     */
    val SPECIFIC_NAME: TableField<Record, String?> = createField(DSL.name("specific_name"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "")

    /**
     * The column <code>mysql.proc.language</code>.
     */
    val LANGUAGE: TableField<Record, ProcLanguage?> = createField(DSL.name("language"), SQLDataType.VARCHAR(3).nullable(false).defaultValue(DSL.inline("SQL", SQLDataType.VARCHAR)).asEnumDataType(nu.studer.sample.mysql.enums.ProcLanguage::class.java), this, "")

    /**
     * The column <code>mysql.proc.sql_data_access</code>.
     */
    val SQL_DATA_ACCESS: TableField<Record, ProcSqlDataAccess?> = createField(DSL.name("sql_data_access"), SQLDataType.VARCHAR(17).nullable(false).defaultValue(DSL.inline("CONTAINS_SQL", SQLDataType.VARCHAR)).asEnumDataType(nu.studer.sample.mysql.enums.ProcSqlDataAccess::class.java), this, "")

    /**
     * The column <code>mysql.proc.is_deterministic</code>.
     */
    val IS_DETERMINISTIC: TableField<Record, ProcIsDeterministic?> = createField(DSL.name("is_deterministic"), SQLDataType.VARCHAR(3).nullable(false).defaultValue(DSL.inline("NO", SQLDataType.VARCHAR)).asEnumDataType(nu.studer.sample.mysql.enums.ProcIsDeterministic::class.java), this, "")

    /**
     * The column <code>mysql.proc.security_type</code>.
     */
    val SECURITY_TYPE: TableField<Record, ProcSecurityType?> = createField(DSL.name("security_type"), SQLDataType.VARCHAR(7).nullable(false).defaultValue(DSL.inline("DEFINER", SQLDataType.VARCHAR)).asEnumDataType(nu.studer.sample.mysql.enums.ProcSecurityType::class.java), this, "")

    /**
     * The column <code>mysql.proc.param_list</code>.
     */
    val PARAM_LIST: TableField<Record, ByteArray?> = createField(DSL.name("param_list"), SQLDataType.BLOB.nullable(false), this, "")

    /**
     * The column <code>mysql.proc.returns</code>.
     */
    val RETURNS: TableField<Record, ByteArray?> = createField(DSL.name("returns"), SQLDataType.BLOB.nullable(false), this, "")

    /**
     * The column <code>mysql.proc.body</code>.
     */
    val BODY: TableField<Record, ByteArray?> = createField(DSL.name("body"), SQLDataType.BLOB.nullable(false), this, "")

    /**
     * The column <code>mysql.proc.definer</code>.
     */
    val DEFINER: TableField<Record, String?> = createField(DSL.name("definer"), SQLDataType.CHAR(93).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "")

    /**
     * The column <code>mysql.proc.created</code>.
     */
    val CREATED: TableField<Record, LocalDateTime?> = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>mysql.proc.modified</code>.
     */
    val MODIFIED: TableField<Record, LocalDateTime?> = createField(DSL.name("modified"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>mysql.proc.sql_mode</code>.
     */
    val SQL_MODE: TableField<Record, String?> = createField(DSL.name("sql_mode"), SQLDataType.VARCHAR(478).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>mysql.proc.comment</code>.
     */
    val COMMENT: TableField<Record, String?> = createField(DSL.name("comment"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>mysql.proc.character_set_client</code>.
     */
    val CHARACTER_SET_CLIENT: TableField<Record, String?> = createField(DSL.name("character_set_client"), SQLDataType.CHAR(32), this, "")

    /**
     * The column <code>mysql.proc.collation_connection</code>.
     */
    val COLLATION_CONNECTION: TableField<Record, String?> = createField(DSL.name("collation_connection"), SQLDataType.CHAR(32), this, "")

    /**
     * The column <code>mysql.proc.db_collation</code>.
     */
    val DB_COLLATION: TableField<Record, String?> = createField(DSL.name("db_collation"), SQLDataType.CHAR(32), this, "")

    /**
     * The column <code>mysql.proc.body_utf8</code>.
     */
    val BODY_UTF8: TableField<Record, ByteArray?> = createField(DSL.name("body_utf8"), SQLDataType.BLOB, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>mysql.proc</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>mysql.proc</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>mysql.proc</code> table reference
     */
    constructor(): this(DSL.name("proc"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PROC, null)
    override fun getSchema(): Schema = Mysql.MYSQL
    override fun getPrimaryKey(): UniqueKey<Record> = KEY_PROC_PRIMARY
    override fun getKeys(): List<UniqueKey<Record>> = listOf(KEY_PROC_PRIMARY)
    override fun `as`(alias: String): Proc = Proc(DSL.name(alias), this)
    override fun `as`(alias: Name): Proc = Proc(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Proc = Proc(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Proc = Proc(name, null)
}
