/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.mysql.tables


import kotlin.collections.List

import nu.studer.sample.mysql.Mysql
import nu.studer.sample.mysql.keys.KEY_TIME_ZONE_TRANSITION_TYPE_PRIMARY

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UByte
import org.jooq.types.UInteger


/**
 * Time zone transition types
 */
@Suppress("UNCHECKED_CAST")
open class TimeZoneTransitionType(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Mysql.MYSQL,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("Time zone transition types"),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>mysql.time_zone_transition_type</code>
         */
        val TIME_ZONE_TRANSITION_TYPE = TimeZoneTransitionType()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>mysql.time_zone_transition_type.Time_zone_id</code>.
     */
    val TIME_ZONE_ID: TableField<Record, UInteger?> = createField(DSL.name("Time_zone_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>mysql.time_zone_transition_type.Transition_type_id</code>.
     */
    val TRANSITION_TYPE_ID: TableField<Record, UInteger?> = createField(DSL.name("Transition_type_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>mysql.time_zone_transition_type.Offset</code>.
     */
    val OFFSET: TableField<Record, Int?> = createField(DSL.name("Offset"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>mysql.time_zone_transition_type.Is_DST</code>.
     */
    val IS_DST: TableField<Record, UByte?> = createField(DSL.name("Is_DST"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "")

    /**
     * The column <code>mysql.time_zone_transition_type.Abbreviation</code>.
     */
    val ABBREVIATION: TableField<Record, String?> = createField(DSL.name("Abbreviation"), SQLDataType.CHAR(8).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>mysql.time_zone_transition_type</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>mysql.time_zone_transition_type</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>mysql.time_zone_transition_type</code> table reference
     */
    constructor(): this(DSL.name("time_zone_transition_type"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, TIME_ZONE_TRANSITION_TYPE, null)
    override fun getSchema(): Schema = Mysql.MYSQL
    override fun getPrimaryKey(): UniqueKey<Record> = KEY_TIME_ZONE_TRANSITION_TYPE_PRIMARY
    override fun getKeys(): List<UniqueKey<Record>> = listOf(KEY_TIME_ZONE_TRANSITION_TYPE_PRIMARY)
    override fun `as`(alias: String): TimeZoneTransitionType = TimeZoneTransitionType(DSL.name(alias), this)
    override fun `as`(alias: Name): TimeZoneTransitionType = TimeZoneTransitionType(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TimeZoneTransitionType = TimeZoneTransitionType(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TimeZoneTransitionType = TimeZoneTransitionType(name, null)
}
