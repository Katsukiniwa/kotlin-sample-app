/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.mysql.tables


import java.time.LocalDateTime
import java.time.LocalTime

import nu.studer.sample.mysql.Mysql

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UInteger
import org.jooq.types.ULong


/**
 * Slow log
 */
@Suppress("UNCHECKED_CAST")
open class SlowLog(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Mysql.MYSQL,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("Slow log"),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>mysql.slow_log</code>
         */
        val SLOW_LOG = SlowLog()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>mysql.slow_log.start_time</code>.
     */
    val START_TIME: TableField<Record, LocalDateTime?> = createField(DSL.name("start_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(6)", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>mysql.slow_log.user_host</code>.
     */
    val USER_HOST: TableField<Record, String?> = createField(DSL.name("user_host"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>mysql.slow_log.query_time</code>.
     */
    val QUERY_TIME: TableField<Record, LocalTime?> = createField(DSL.name("query_time"), SQLDataType.LOCALTIME(6).nullable(false), this, "")

    /**
     * The column <code>mysql.slow_log.lock_time</code>.
     */
    val LOCK_TIME: TableField<Record, LocalTime?> = createField(DSL.name("lock_time"), SQLDataType.LOCALTIME(6).nullable(false), this, "")

    /**
     * The column <code>mysql.slow_log.rows_sent</code>.
     */
    val ROWS_SENT: TableField<Record, Int?> = createField(DSL.name("rows_sent"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>mysql.slow_log.rows_examined</code>.
     */
    val ROWS_EXAMINED: TableField<Record, Int?> = createField(DSL.name("rows_examined"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>mysql.slow_log.db</code>.
     */
    val DB: TableField<Record, String?> = createField(DSL.name("db"), SQLDataType.VARCHAR(512).nullable(false), this, "")

    /**
     * The column <code>mysql.slow_log.last_insert_id</code>.
     */
    val LAST_INSERT_ID: TableField<Record, Int?> = createField(DSL.name("last_insert_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>mysql.slow_log.insert_id</code>.
     */
    val INSERT_ID: TableField<Record, Int?> = createField(DSL.name("insert_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>mysql.slow_log.server_id</code>.
     */
    val SERVER_ID: TableField<Record, UInteger?> = createField(DSL.name("server_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>mysql.slow_log.sql_text</code>.
     */
    val SQL_TEXT: TableField<Record, ByteArray?> = createField(DSL.name("sql_text"), SQLDataType.BLOB.nullable(false), this, "")

    /**
     * The column <code>mysql.slow_log.thread_id</code>.
     */
    val THREAD_ID: TableField<Record, ULong?> = createField(DSL.name("thread_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>mysql.slow_log</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>mysql.slow_log</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>mysql.slow_log</code> table reference
     */
    constructor(): this(DSL.name("slow_log"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, SLOW_LOG, null)
    override fun getSchema(): Schema = Mysql.MYSQL
    override fun `as`(alias: String): SlowLog = SlowLog(DSL.name(alias), this)
    override fun `as`(alias: Name): SlowLog = SlowLog(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SlowLog = SlowLog(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SlowLog = SlowLog(name, null)
}
