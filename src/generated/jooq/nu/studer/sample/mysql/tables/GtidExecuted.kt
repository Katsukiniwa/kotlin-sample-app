/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.mysql.tables


import kotlin.collections.List

import nu.studer.sample.mysql.Mysql
import nu.studer.sample.mysql.keys.KEY_GTID_EXECUTED_PRIMARY

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GtidExecuted(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Mysql.MYSQL,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>mysql.gtid_executed</code>
         */
        val GTID_EXECUTED = GtidExecuted()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>mysql.gtid_executed.source_uuid</code>. uuid of the source where the transaction was originally executed.
     */
    val SOURCE_UUID: TableField<Record, String?> = createField(DSL.name("source_uuid"), SQLDataType.CHAR(36).nullable(false), this, "uuid of the source where the transaction was originally executed.")

    /**
     * The column <code>mysql.gtid_executed.interval_start</code>. First number of interval.
     */
    val INTERVAL_START: TableField<Record, Long?> = createField(DSL.name("interval_start"), SQLDataType.BIGINT.nullable(false), this, "First number of interval.")

    /**
     * The column <code>mysql.gtid_executed.interval_end</code>. Last number of interval.
     */
    val INTERVAL_END: TableField<Record, Long?> = createField(DSL.name("interval_end"), SQLDataType.BIGINT.nullable(false), this, "Last number of interval.")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>mysql.gtid_executed</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>mysql.gtid_executed</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>mysql.gtid_executed</code> table reference
     */
    constructor(): this(DSL.name("gtid_executed"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, GTID_EXECUTED, null)
    override fun getSchema(): Schema = Mysql.MYSQL
    override fun getPrimaryKey(): UniqueKey<Record> = KEY_GTID_EXECUTED_PRIMARY
    override fun getKeys(): List<UniqueKey<Record>> = listOf(KEY_GTID_EXECUTED_PRIMARY)
    override fun `as`(alias: String): GtidExecuted = GtidExecuted(DSL.name(alias), this)
    override fun `as`(alias: Name): GtidExecuted = GtidExecuted(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): GtidExecuted = GtidExecuted(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): GtidExecuted = GtidExecuted(name, null)
}
