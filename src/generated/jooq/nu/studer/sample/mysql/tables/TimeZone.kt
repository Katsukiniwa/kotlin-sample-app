/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.mysql.tables


import kotlin.collections.List

import nu.studer.sample.mysql.Mysql
import nu.studer.sample.mysql.enums.TimeZoneUseLeapSeconds
import nu.studer.sample.mysql.keys.KEY_TIME_ZONE_PRIMARY

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UInteger


/**
 * Time zones
 */
@Suppress("UNCHECKED_CAST")
open class TimeZone(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Mysql.MYSQL,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("Time zones"),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>mysql.time_zone</code>
         */
        val TIME_ZONE = TimeZone()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>mysql.time_zone.Time_zone_id</code>.
     */
    val TIME_ZONE_ID: TableField<Record, UInteger?> = createField(DSL.name("Time_zone_id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "")

    /**
     * The column <code>mysql.time_zone.Use_leap_seconds</code>.
     */
    val USE_LEAP_SECONDS: TableField<Record, TimeZoneUseLeapSeconds?> = createField(DSL.name("Use_leap_seconds"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(nu.studer.sample.mysql.enums.TimeZoneUseLeapSeconds::class.java), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>mysql.time_zone</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>mysql.time_zone</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>mysql.time_zone</code> table reference
     */
    constructor(): this(DSL.name("time_zone"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, TIME_ZONE, null)
    override fun getSchema(): Schema = Mysql.MYSQL
    override fun getIdentity(): Identity<Record, UInteger?> = super.getIdentity() as Identity<Record, UInteger?>
    override fun getPrimaryKey(): UniqueKey<Record> = KEY_TIME_ZONE_PRIMARY
    override fun getKeys(): List<UniqueKey<Record>> = listOf(KEY_TIME_ZONE_PRIMARY)
    override fun `as`(alias: String): TimeZone = TimeZone(DSL.name(alias), this)
    override fun `as`(alias: Name): TimeZone = TimeZone(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TimeZone = TimeZone(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TimeZone = TimeZone(name, null)
}
