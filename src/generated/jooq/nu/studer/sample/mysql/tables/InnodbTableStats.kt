/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.mysql.tables


import java.time.LocalDateTime

import kotlin.collections.List

import nu.studer.sample.mysql.Mysql
import nu.studer.sample.mysql.keys.KEY_INNODB_TABLE_STATS_PRIMARY

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InnodbTableStats(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Mysql.MYSQL,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>mysql.innodb_table_stats</code>
         */
        val INNODB_TABLE_STATS = InnodbTableStats()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>mysql.innodb_table_stats.database_name</code>.
     */
    val DATABASE_NAME: TableField<Record, String?> = createField(DSL.name("database_name"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>mysql.innodb_table_stats.table_name</code>.
     */
    val TABLE_NAME: TableField<Record, String?> = createField(DSL.name("table_name"), SQLDataType.VARCHAR(199).nullable(false), this, "")

    /**
     * The column <code>mysql.innodb_table_stats.last_update</code>.
     */
    val LAST_UPDATE: TableField<Record, LocalDateTime?> = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>mysql.innodb_table_stats.n_rows</code>.
     */
    val N_ROWS: TableField<Record, ULong?> = createField(DSL.name("n_rows"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>mysql.innodb_table_stats.clustered_index_size</code>.
     */
    val CLUSTERED_INDEX_SIZE: TableField<Record, ULong?> = createField(DSL.name("clustered_index_size"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>mysql.innodb_table_stats.sum_of_other_index_sizes</code>.
     */
    val SUM_OF_OTHER_INDEX_SIZES: TableField<Record, ULong?> = createField(DSL.name("sum_of_other_index_sizes"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>mysql.innodb_table_stats</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>mysql.innodb_table_stats</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>mysql.innodb_table_stats</code> table reference
     */
    constructor(): this(DSL.name("innodb_table_stats"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, INNODB_TABLE_STATS, null)
    override fun getSchema(): Schema = Mysql.MYSQL
    override fun getPrimaryKey(): UniqueKey<Record> = KEY_INNODB_TABLE_STATS_PRIMARY
    override fun getKeys(): List<UniqueKey<Record>> = listOf(KEY_INNODB_TABLE_STATS_PRIMARY)
    override fun `as`(alias: String): InnodbTableStats = InnodbTableStats(DSL.name(alias), this)
    override fun `as`(alias: Name): InnodbTableStats = InnodbTableStats(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): InnodbTableStats = InnodbTableStats(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): InnodbTableStats = InnodbTableStats(name, null)
}
