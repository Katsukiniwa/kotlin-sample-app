/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.mysql.tables


import kotlin.collections.List

import nu.studer.sample.mysql.Mysql
import nu.studer.sample.mysql.keys.KEY_SLAVE_RELAY_LOG_INFO_PRIMARY

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UInteger
import org.jooq.types.ULong


/**
 * Relay Log Information
 */
@Suppress("UNCHECKED_CAST")
open class SlaveRelayLogInfo(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Mysql.MYSQL,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("Relay Log Information"),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>mysql.slave_relay_log_info</code>
         */
        val SLAVE_RELAY_LOG_INFO = SlaveRelayLogInfo()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>mysql.slave_relay_log_info.Number_of_lines</code>. Number of lines in the file or rows in the table. Used to version table definitions.
     */
    val NUMBER_OF_LINES: TableField<Record, UInteger?> = createField(DSL.name("Number_of_lines"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "Number of lines in the file or rows in the table. Used to version table definitions.")

    /**
     * The column <code>mysql.slave_relay_log_info.Relay_log_name</code>. The name of the current relay log file.
     */
    val RELAY_LOG_NAME: TableField<Record, String?> = createField(DSL.name("Relay_log_name"), SQLDataType.CLOB.nullable(false), this, "The name of the current relay log file.")

    /**
     * The column <code>mysql.slave_relay_log_info.Relay_log_pos</code>. The relay log position of the last executed event.
     */
    val RELAY_LOG_POS: TableField<Record, ULong?> = createField(DSL.name("Relay_log_pos"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The relay log position of the last executed event.")

    /**
     * The column <code>mysql.slave_relay_log_info.Master_log_name</code>. The name of the master binary log file from which the events in the relay log file were read.
     */
    val MASTER_LOG_NAME: TableField<Record, String?> = createField(DSL.name("Master_log_name"), SQLDataType.CLOB.nullable(false), this, "The name of the master binary log file from which the events in the relay log file were read.")

    /**
     * The column <code>mysql.slave_relay_log_info.Master_log_pos</code>. The master log position of the last executed event.
     */
    val MASTER_LOG_POS: TableField<Record, ULong?> = createField(DSL.name("Master_log_pos"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The master log position of the last executed event.")

    /**
     * The column <code>mysql.slave_relay_log_info.Sql_delay</code>. The number of seconds that the slave must lag behind the master.
     */
    val SQL_DELAY: TableField<Record, Int?> = createField(DSL.name("Sql_delay"), SQLDataType.INTEGER.nullable(false), this, "The number of seconds that the slave must lag behind the master.")

    /**
     * The column <code>mysql.slave_relay_log_info.Number_of_workers</code>.
     */
    val NUMBER_OF_WORKERS: TableField<Record, UInteger?> = createField(DSL.name("Number_of_workers"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>mysql.slave_relay_log_info.Id</code>. Internal Id that uniquely identifies this record.
     */
    val ID: TableField<Record, UInteger?> = createField(DSL.name("Id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "Internal Id that uniquely identifies this record.")

    /**
     * The column <code>mysql.slave_relay_log_info.Channel_name</code>. The channel on which the slave is connected to a source. Used in Multisource Replication
     */
    val CHANNEL_NAME: TableField<Record, String?> = createField(DSL.name("Channel_name"), SQLDataType.CHAR(64).nullable(false), this, "The channel on which the slave is connected to a source. Used in Multisource Replication")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>mysql.slave_relay_log_info</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>mysql.slave_relay_log_info</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>mysql.slave_relay_log_info</code> table reference
     */
    constructor(): this(DSL.name("slave_relay_log_info"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, SLAVE_RELAY_LOG_INFO, null)
    override fun getSchema(): Schema = Mysql.MYSQL
    override fun getPrimaryKey(): UniqueKey<Record> = KEY_SLAVE_RELAY_LOG_INFO_PRIMARY
    override fun getKeys(): List<UniqueKey<Record>> = listOf(KEY_SLAVE_RELAY_LOG_INFO_PRIMARY)
    override fun `as`(alias: String): SlaveRelayLogInfo = SlaveRelayLogInfo(DSL.name(alias), this)
    override fun `as`(alias: Name): SlaveRelayLogInfo = SlaveRelayLogInfo(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SlaveRelayLogInfo = SlaveRelayLogInfo(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SlaveRelayLogInfo = SlaveRelayLogInfo(name, null)
}
