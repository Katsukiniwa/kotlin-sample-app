/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.mysql.tables


import java.time.LocalDateTime

import kotlin.collections.List

import nu.studer.sample.mysql.Mysql
import nu.studer.sample.mysql.enums.EventIntervalField
import nu.studer.sample.mysql.enums.EventOnCompletion
import nu.studer.sample.mysql.enums.EventStatus
import nu.studer.sample.mysql.keys.KEY_EVENT_PRIMARY

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UInteger


/**
 * Events
 */
@Suppress("UNCHECKED_CAST")
open class Event(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Mysql.MYSQL,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("Events"),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>mysql.event</code>
         */
        val EVENT = Event()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>mysql.event.db</code>.
     */
    val DB: TableField<Record, String?> = createField(DSL.name("db"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "")

    /**
     * The column <code>mysql.event.name</code>.
     */
    val NAME: TableField<Record, String?> = createField(DSL.name("name"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "")

    /**
     * The column <code>mysql.event.body</code>.
     */
    val BODY: TableField<Record, ByteArray?> = createField(DSL.name("body"), SQLDataType.BLOB.nullable(false), this, "")

    /**
     * The column <code>mysql.event.definer</code>.
     */
    val DEFINER: TableField<Record, String?> = createField(DSL.name("definer"), SQLDataType.CHAR(93).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "")

    /**
     * The column <code>mysql.event.execute_at</code>.
     */
    val EXECUTE_AT: TableField<Record, LocalDateTime?> = createField(DSL.name("execute_at"), SQLDataType.LOCALDATETIME(0), this, "")

    /**
     * The column <code>mysql.event.interval_value</code>.
     */
    val INTERVAL_VALUE: TableField<Record, Int?> = createField(DSL.name("interval_value"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>mysql.event.interval_field</code>.
     */
    val INTERVAL_FIELD: TableField<Record, EventIntervalField?> = createField(DSL.name("interval_field"), SQLDataType.VARCHAR(18).asEnumDataType(nu.studer.sample.mysql.enums.EventIntervalField::class.java), this, "")

    /**
     * The column <code>mysql.event.created</code>.
     */
    val CREATED: TableField<Record, LocalDateTime?> = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>mysql.event.modified</code>.
     */
    val MODIFIED: TableField<Record, LocalDateTime?> = createField(DSL.name("modified"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>mysql.event.last_executed</code>.
     */
    val LAST_EXECUTED: TableField<Record, LocalDateTime?> = createField(DSL.name("last_executed"), SQLDataType.LOCALDATETIME(0), this, "")

    /**
     * The column <code>mysql.event.starts</code>.
     */
    val STARTS: TableField<Record, LocalDateTime?> = createField(DSL.name("starts"), SQLDataType.LOCALDATETIME(0), this, "")

    /**
     * The column <code>mysql.event.ends</code>.
     */
    val ENDS: TableField<Record, LocalDateTime?> = createField(DSL.name("ends"), SQLDataType.LOCALDATETIME(0), this, "")

    /**
     * The column <code>mysql.event.status</code>.
     */
    val STATUS: TableField<Record, EventStatus?> = createField(DSL.name("status"), SQLDataType.VARCHAR(18).nullable(false).defaultValue(DSL.inline("ENABLED", SQLDataType.VARCHAR)).asEnumDataType(nu.studer.sample.mysql.enums.EventStatus::class.java), this, "")

    /**
     * The column <code>mysql.event.on_completion</code>.
     */
    val ON_COMPLETION: TableField<Record, EventOnCompletion?> = createField(DSL.name("on_completion"), SQLDataType.VARCHAR(8).nullable(false).defaultValue(DSL.inline("DROP", SQLDataType.VARCHAR)).asEnumDataType(nu.studer.sample.mysql.enums.EventOnCompletion::class.java), this, "")

    /**
     * The column <code>mysql.event.sql_mode</code>.
     */
    val SQL_MODE: TableField<Record, String?> = createField(DSL.name("sql_mode"), SQLDataType.VARCHAR(478).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>mysql.event.comment</code>.
     */
    val COMMENT: TableField<Record, String?> = createField(DSL.name("comment"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "")

    /**
     * The column <code>mysql.event.originator</code>.
     */
    val ORIGINATOR: TableField<Record, UInteger?> = createField(DSL.name("originator"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>mysql.event.time_zone</code>.
     */
    val TIME_ZONE: TableField<Record, String?> = createField(DSL.name("time_zone"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("SYSTEM", SQLDataType.CHAR)), this, "")

    /**
     * The column <code>mysql.event.character_set_client</code>.
     */
    val CHARACTER_SET_CLIENT: TableField<Record, String?> = createField(DSL.name("character_set_client"), SQLDataType.CHAR(32), this, "")

    /**
     * The column <code>mysql.event.collation_connection</code>.
     */
    val COLLATION_CONNECTION: TableField<Record, String?> = createField(DSL.name("collation_connection"), SQLDataType.CHAR(32), this, "")

    /**
     * The column <code>mysql.event.db_collation</code>.
     */
    val DB_COLLATION: TableField<Record, String?> = createField(DSL.name("db_collation"), SQLDataType.CHAR(32), this, "")

    /**
     * The column <code>mysql.event.body_utf8</code>.
     */
    val BODY_UTF8: TableField<Record, ByteArray?> = createField(DSL.name("body_utf8"), SQLDataType.BLOB, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>mysql.event</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>mysql.event</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>mysql.event</code> table reference
     */
    constructor(): this(DSL.name("event"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, EVENT, null)
    override fun getSchema(): Schema = Mysql.MYSQL
    override fun getPrimaryKey(): UniqueKey<Record> = KEY_EVENT_PRIMARY
    override fun getKeys(): List<UniqueKey<Record>> = listOf(KEY_EVENT_PRIMARY)
    override fun `as`(alias: String): Event = Event(DSL.name(alias), this)
    override fun `as`(alias: Name): Event = Event(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Event = Event(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Event = Event(name, null)
}
