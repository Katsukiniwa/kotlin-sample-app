/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.mysql.tables


import kotlin.collections.List

import nu.studer.sample.mysql.Mysql
import nu.studer.sample.mysql.keys.KEY_TIME_ZONE_TRANSITION_PRIMARY

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UInteger


/**
 * Time zone transitions
 */
@Suppress("UNCHECKED_CAST")
open class TimeZoneTransition(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Mysql.MYSQL,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("Time zone transitions"),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>mysql.time_zone_transition</code>
         */
        val TIME_ZONE_TRANSITION = TimeZoneTransition()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>mysql.time_zone_transition.Time_zone_id</code>.
     */
    val TIME_ZONE_ID: TableField<Record, UInteger?> = createField(DSL.name("Time_zone_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>mysql.time_zone_transition.Transition_time</code>.
     */
    val TRANSITION_TIME: TableField<Record, Long?> = createField(DSL.name("Transition_time"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>mysql.time_zone_transition.Transition_type_id</code>.
     */
    val TRANSITION_TYPE_ID: TableField<Record, UInteger?> = createField(DSL.name("Transition_type_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>mysql.time_zone_transition</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>mysql.time_zone_transition</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>mysql.time_zone_transition</code> table reference
     */
    constructor(): this(DSL.name("time_zone_transition"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, TIME_ZONE_TRANSITION, null)
    override fun getSchema(): Schema = Mysql.MYSQL
    override fun getPrimaryKey(): UniqueKey<Record> = KEY_TIME_ZONE_TRANSITION_PRIMARY
    override fun getKeys(): List<UniqueKey<Record>> = listOf(KEY_TIME_ZONE_TRANSITION_PRIMARY)
    override fun `as`(alias: String): TimeZoneTransition = TimeZoneTransition(DSL.name(alias), this)
    override fun `as`(alias: Name): TimeZoneTransition = TimeZoneTransition(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TimeZoneTransition = TimeZoneTransition(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TimeZoneTransition = TimeZoneTransition(name, null)
}
