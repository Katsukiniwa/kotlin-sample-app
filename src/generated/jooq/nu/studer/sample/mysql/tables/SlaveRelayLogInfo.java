/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.mysql.tables;


import java.util.Arrays;
import java.util.List;

import nu.studer.sample.mysql.Keys;
import nu.studer.sample.mysql.Mysql;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * Relay Log Information
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SlaveRelayLogInfo extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.slave_relay_log_info</code>
     */
    public static final SlaveRelayLogInfo SLAVE_RELAY_LOG_INFO = new SlaveRelayLogInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>mysql.slave_relay_log_info.Number_of_lines</code>. Number of lines in the file or rows in the table. Used to version table definitions.
     */
    public final TableField<Record, UInteger> NUMBER_OF_LINES = createField(DSL.name("Number_of_lines"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "Number of lines in the file or rows in the table. Used to version table definitions.");

    /**
     * The column <code>mysql.slave_relay_log_info.Relay_log_name</code>. The name of the current relay log file.
     */
    public final TableField<Record, String> RELAY_LOG_NAME = createField(DSL.name("Relay_log_name"), SQLDataType.CLOB.nullable(false), this, "The name of the current relay log file.");

    /**
     * The column <code>mysql.slave_relay_log_info.Relay_log_pos</code>. The relay log position of the last executed event.
     */
    public final TableField<Record, ULong> RELAY_LOG_POS = createField(DSL.name("Relay_log_pos"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The relay log position of the last executed event.");

    /**
     * The column <code>mysql.slave_relay_log_info.Master_log_name</code>. The name of the master binary log file from which the events in the relay log file were read.
     */
    public final TableField<Record, String> MASTER_LOG_NAME = createField(DSL.name("Master_log_name"), SQLDataType.CLOB.nullable(false), this, "The name of the master binary log file from which the events in the relay log file were read.");

    /**
     * The column <code>mysql.slave_relay_log_info.Master_log_pos</code>. The master log position of the last executed event.
     */
    public final TableField<Record, ULong> MASTER_LOG_POS = createField(DSL.name("Master_log_pos"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The master log position of the last executed event.");

    /**
     * The column <code>mysql.slave_relay_log_info.Sql_delay</code>. The number of seconds that the slave must lag behind the master.
     */
    public final TableField<Record, Integer> SQL_DELAY = createField(DSL.name("Sql_delay"), SQLDataType.INTEGER.nullable(false), this, "The number of seconds that the slave must lag behind the master.");

    /**
     * The column <code>mysql.slave_relay_log_info.Number_of_workers</code>.
     */
    public final TableField<Record, UInteger> NUMBER_OF_WORKERS = createField(DSL.name("Number_of_workers"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.slave_relay_log_info.Id</code>. Internal Id that uniquely identifies this record.
     */
    public final TableField<Record, UInteger> ID = createField(DSL.name("Id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "Internal Id that uniquely identifies this record.");

    /**
     * The column <code>mysql.slave_relay_log_info.Channel_name</code>. The channel on which the slave is connected to a source. Used in Multisource Replication
     */
    public final TableField<Record, String> CHANNEL_NAME = createField(DSL.name("Channel_name"), SQLDataType.CHAR(64).nullable(false), this, "The channel on which the slave is connected to a source. Used in Multisource Replication");

    private SlaveRelayLogInfo(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private SlaveRelayLogInfo(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Relay Log Information"), TableOptions.table());
    }

    /**
     * Create an aliased <code>mysql.slave_relay_log_info</code> table reference
     */
    public SlaveRelayLogInfo(String alias) {
        this(DSL.name(alias), SLAVE_RELAY_LOG_INFO);
    }

    /**
     * Create an aliased <code>mysql.slave_relay_log_info</code> table reference
     */
    public SlaveRelayLogInfo(Name alias) {
        this(alias, SLAVE_RELAY_LOG_INFO);
    }

    /**
     * Create a <code>mysql.slave_relay_log_info</code> table reference
     */
    public SlaveRelayLogInfo() {
        this(DSL.name("slave_relay_log_info"), null);
    }

    public <O extends Record> SlaveRelayLogInfo(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SLAVE_RELAY_LOG_INFO);
    }

    @Override
    public Schema getSchema() {
        return Mysql.MYSQL;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_SLAVE_RELAY_LOG_INFO_PRIMARY;
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.KEY_SLAVE_RELAY_LOG_INFO_PRIMARY);
    }

    @Override
    public SlaveRelayLogInfo as(String alias) {
        return new SlaveRelayLogInfo(DSL.name(alias), this);
    }

    @Override
    public SlaveRelayLogInfo as(Name alias) {
        return new SlaveRelayLogInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SlaveRelayLogInfo rename(String name) {
        return new SlaveRelayLogInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SlaveRelayLogInfo rename(Name name) {
        return new SlaveRelayLogInfo(name, null);
    }
}
