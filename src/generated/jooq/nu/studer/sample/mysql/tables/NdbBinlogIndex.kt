/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.mysql.tables


import kotlin.collections.List

import nu.studer.sample.mysql.Mysql
import nu.studer.sample.mysql.keys.KEY_NDB_BINLOG_INDEX_PRIMARY

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UInteger
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class NdbBinlogIndex(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Mysql.MYSQL,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>mysql.ndb_binlog_index</code>
         */
        val NDB_BINLOG_INDEX = NdbBinlogIndex()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>mysql.ndb_binlog_index.Position</code>.
     */
    val POSITION: TableField<Record, ULong?> = createField(DSL.name("Position"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>mysql.ndb_binlog_index.File</code>.
     */
    val FILE: TableField<Record, String?> = createField(DSL.name("File"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>mysql.ndb_binlog_index.epoch</code>.
     */
    val EPOCH: TableField<Record, ULong?> = createField(DSL.name("epoch"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>mysql.ndb_binlog_index.inserts</code>.
     */
    val INSERTS: TableField<Record, UInteger?> = createField(DSL.name("inserts"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>mysql.ndb_binlog_index.updates</code>.
     */
    val UPDATES: TableField<Record, UInteger?> = createField(DSL.name("updates"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>mysql.ndb_binlog_index.deletes</code>.
     */
    val DELETES: TableField<Record, UInteger?> = createField(DSL.name("deletes"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>mysql.ndb_binlog_index.schemaops</code>.
     */
    val SCHEMAOPS: TableField<Record, UInteger?> = createField(DSL.name("schemaops"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>mysql.ndb_binlog_index.orig_server_id</code>.
     */
    val ORIG_SERVER_ID: TableField<Record, UInteger?> = createField(DSL.name("orig_server_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>mysql.ndb_binlog_index.orig_epoch</code>.
     */
    val ORIG_EPOCH: TableField<Record, ULong?> = createField(DSL.name("orig_epoch"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>mysql.ndb_binlog_index.gci</code>.
     */
    val GCI: TableField<Record, UInteger?> = createField(DSL.name("gci"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>mysql.ndb_binlog_index.next_position</code>.
     */
    val NEXT_POSITION: TableField<Record, ULong?> = createField(DSL.name("next_position"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>mysql.ndb_binlog_index.next_file</code>.
     */
    val NEXT_FILE: TableField<Record, String?> = createField(DSL.name("next_file"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>mysql.ndb_binlog_index</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>mysql.ndb_binlog_index</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>mysql.ndb_binlog_index</code> table reference
     */
    constructor(): this(DSL.name("ndb_binlog_index"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, NDB_BINLOG_INDEX, null)
    override fun getSchema(): Schema = Mysql.MYSQL
    override fun getPrimaryKey(): UniqueKey<Record> = KEY_NDB_BINLOG_INDEX_PRIMARY
    override fun getKeys(): List<UniqueKey<Record>> = listOf(KEY_NDB_BINLOG_INDEX_PRIMARY)
    override fun `as`(alias: String): NdbBinlogIndex = NdbBinlogIndex(DSL.name(alias), this)
    override fun `as`(alias: Name): NdbBinlogIndex = NdbBinlogIndex(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): NdbBinlogIndex = NdbBinlogIndex(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): NdbBinlogIndex = NdbBinlogIndex(name, null)
}
