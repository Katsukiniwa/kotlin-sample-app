/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.mysql


import kotlin.collections.List

import nu.studer.sample.DefaultCatalog
import nu.studer.sample.mysql.tables.ColumnsPriv
import nu.studer.sample.mysql.tables.Db
import nu.studer.sample.mysql.tables.EngineCost
import nu.studer.sample.mysql.tables.Event
import nu.studer.sample.mysql.tables.Func
import nu.studer.sample.mysql.tables.GeneralLog
import nu.studer.sample.mysql.tables.GtidExecuted
import nu.studer.sample.mysql.tables.HelpCategory
import nu.studer.sample.mysql.tables.HelpKeyword
import nu.studer.sample.mysql.tables.HelpRelation
import nu.studer.sample.mysql.tables.HelpTopic
import nu.studer.sample.mysql.tables.InnodbIndexStats
import nu.studer.sample.mysql.tables.InnodbTableStats
import nu.studer.sample.mysql.tables.NdbBinlogIndex
import nu.studer.sample.mysql.tables.Plugin
import nu.studer.sample.mysql.tables.Proc
import nu.studer.sample.mysql.tables.ProcsPriv
import nu.studer.sample.mysql.tables.ProxiesPriv
import nu.studer.sample.mysql.tables.ServerCost
import nu.studer.sample.mysql.tables.Servers
import nu.studer.sample.mysql.tables.SlaveMasterInfo
import nu.studer.sample.mysql.tables.SlaveRelayLogInfo
import nu.studer.sample.mysql.tables.SlaveWorkerInfo
import nu.studer.sample.mysql.tables.SlowLog
import nu.studer.sample.mysql.tables.TablesPriv
import nu.studer.sample.mysql.tables.TimeZone
import nu.studer.sample.mysql.tables.TimeZoneLeapSecond
import nu.studer.sample.mysql.tables.TimeZoneName
import nu.studer.sample.mysql.tables.TimeZoneTransition
import nu.studer.sample.mysql.tables.TimeZoneTransitionType
import nu.studer.sample.mysql.tables.User

import org.jooq.Catalog
import org.jooq.Table
import org.jooq.impl.SchemaImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Mysql : SchemaImpl("mysql", DefaultCatalog.DEFAULT_CATALOG) {
    companion object {

        /**
         * The reference instance of <code>mysql</code>
         */
        val MYSQL = Mysql()
    }

    /**
     * Column privileges
     */
    val COLUMNS_PRIV get() = ColumnsPriv.COLUMNS_PRIV

    /**
     * Database privileges
     */
    val DB get() = Db.DB

    /**
     * The table <code>mysql.engine_cost</code>.
     */
    val ENGINE_COST get() = EngineCost.ENGINE_COST

    /**
     * Events
     */
    val EVENT get() = Event.EVENT

    /**
     * User defined functions
     */
    val FUNC get() = Func.FUNC

    /**
     * General log
     */
    val GENERAL_LOG get() = GeneralLog.GENERAL_LOG

    /**
     * The table <code>mysql.gtid_executed</code>.
     */
    val GTID_EXECUTED get() = GtidExecuted.GTID_EXECUTED

    /**
     * help categories
     */
    val HELP_CATEGORY get() = HelpCategory.HELP_CATEGORY

    /**
     * help keywords
     */
    val HELP_KEYWORD get() = HelpKeyword.HELP_KEYWORD

    /**
     * keyword-topic relation
     */
    val HELP_RELATION get() = HelpRelation.HELP_RELATION

    /**
     * help topics
     */
    val HELP_TOPIC get() = HelpTopic.HELP_TOPIC

    /**
     * The table <code>mysql.innodb_index_stats</code>.
     */
    val INNODB_INDEX_STATS get() = InnodbIndexStats.INNODB_INDEX_STATS

    /**
     * The table <code>mysql.innodb_table_stats</code>.
     */
    val INNODB_TABLE_STATS get() = InnodbTableStats.INNODB_TABLE_STATS

    /**
     * The table <code>mysql.ndb_binlog_index</code>.
     */
    val NDB_BINLOG_INDEX get() = NdbBinlogIndex.NDB_BINLOG_INDEX

    /**
     * MySQL plugins
     */
    val PLUGIN get() = Plugin.PLUGIN

    /**
     * Stored Procedures
     */
    val PROC get() = Proc.PROC

    /**
     * Procedure privileges
     */
    val PROCS_PRIV get() = ProcsPriv.PROCS_PRIV

    /**
     * User proxy privileges
     */
    val PROXIES_PRIV get() = ProxiesPriv.PROXIES_PRIV

    /**
     * The table <code>mysql.server_cost</code>.
     */
    val SERVER_COST get() = ServerCost.SERVER_COST

    /**
     * MySQL Foreign Servers table
     */
    val SERVERS get() = Servers.SERVERS

    /**
     * Master Information
     */
    val SLAVE_MASTER_INFO get() = SlaveMasterInfo.SLAVE_MASTER_INFO

    /**
     * Relay Log Information
     */
    val SLAVE_RELAY_LOG_INFO get() = SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO

    /**
     * Worker Information
     */
    val SLAVE_WORKER_INFO get() = SlaveWorkerInfo.SLAVE_WORKER_INFO

    /**
     * Slow log
     */
    val SLOW_LOG get() = SlowLog.SLOW_LOG

    /**
     * Table privileges
     */
    val TABLES_PRIV get() = TablesPriv.TABLES_PRIV

    /**
     * Time zones
     */
    val TIME_ZONE get() = TimeZone.TIME_ZONE

    /**
     * Leap seconds information for time zones
     */
    val TIME_ZONE_LEAP_SECOND get() = TimeZoneLeapSecond.TIME_ZONE_LEAP_SECOND

    /**
     * Time zone names
     */
    val TIME_ZONE_NAME get() = TimeZoneName.TIME_ZONE_NAME

    /**
     * Time zone transitions
     */
    val TIME_ZONE_TRANSITION get() = TimeZoneTransition.TIME_ZONE_TRANSITION

    /**
     * Time zone transition types
     */
    val TIME_ZONE_TRANSITION_TYPE get() = TimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE

    /**
     * Users and global privileges
     */
    val USER get() = User.USER

    override fun getCatalog(): Catalog = DefaultCatalog.DEFAULT_CATALOG

    override fun getTables(): List<Table<*>> = listOf(
        ColumnsPriv.COLUMNS_PRIV,
        Db.DB,
        EngineCost.ENGINE_COST,
        Event.EVENT,
        Func.FUNC,
        GeneralLog.GENERAL_LOG,
        GtidExecuted.GTID_EXECUTED,
        HelpCategory.HELP_CATEGORY,
        HelpKeyword.HELP_KEYWORD,
        HelpRelation.HELP_RELATION,
        HelpTopic.HELP_TOPIC,
        InnodbIndexStats.INNODB_INDEX_STATS,
        InnodbTableStats.INNODB_TABLE_STATS,
        NdbBinlogIndex.NDB_BINLOG_INDEX,
        Plugin.PLUGIN,
        Proc.PROC,
        ProcsPriv.PROCS_PRIV,
        ProxiesPriv.PROXIES_PRIV,
        ServerCost.SERVER_COST,
        Servers.SERVERS,
        SlaveMasterInfo.SLAVE_MASTER_INFO,
        SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO,
        SlaveWorkerInfo.SLAVE_WORKER_INFO,
        SlowLog.SLOW_LOG,
        TablesPriv.TABLES_PRIV,
        TimeZone.TIME_ZONE,
        TimeZoneLeapSecond.TIME_ZONE_LEAP_SECOND,
        TimeZoneName.TIME_ZONE_NAME,
        TimeZoneTransition.TIME_ZONE_TRANSITION,
        TimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE,
        User.USER
    )
}
