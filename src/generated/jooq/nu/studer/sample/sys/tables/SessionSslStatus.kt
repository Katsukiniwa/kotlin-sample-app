/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables


import nu.studer.sample.sys.Sys

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * VIEW
 */
@Suppress("UNCHECKED_CAST")
open class SessionSslStatus(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Sys.SYS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("VIEW"),
    TableOptions.view("create view `session_ssl_status` as select `sslver`.`THREAD_ID` AS `thread_id`,`sslver`.`VARIABLE_VALUE` AS `ssl_version`,`sslcip`.`VARIABLE_VALUE` AS `ssl_cipher`,`sslreuse`.`VARIABLE_VALUE` AS `ssl_sessions_reused` from ((`performance_schema`.`status_by_thread` `sslver` left join `performance_schema`.`status_by_thread` `sslcip` on(((`sslcip`.`THREAD_ID` = `sslver`.`THREAD_ID`) and (`sslcip`.`VARIABLE_NAME` = 'Ssl_cipher')))) left join `performance_schema`.`status_by_thread` `sslreuse` on(((`sslreuse`.`THREAD_ID` = `sslver`.`THREAD_ID`) and (`sslreuse`.`VARIABLE_NAME` = 'Ssl_sessions_reused')))) where (`sslver`.`VARIABLE_NAME` = 'Ssl_version')")
) {
    companion object {

        /**
         * The reference instance of <code>sys.session_ssl_status</code>
         */
        val SESSION_SSL_STATUS = SessionSslStatus()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>sys.session_ssl_status.thread_id</code>.
     */
    val THREAD_ID: TableField<Record, ULong?> = createField(DSL.name("thread_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.session_ssl_status.ssl_version</code>.
     */
    val SSL_VERSION: TableField<Record, String?> = createField(DSL.name("ssl_version"), SQLDataType.VARCHAR(1024), this, "")

    /**
     * The column <code>sys.session_ssl_status.ssl_cipher</code>.
     */
    val SSL_CIPHER: TableField<Record, String?> = createField(DSL.name("ssl_cipher"), SQLDataType.VARCHAR(1024), this, "")

    /**
     * The column <code>sys.session_ssl_status.ssl_sessions_reused</code>.
     */
    val SSL_SESSIONS_REUSED: TableField<Record, String?> = createField(DSL.name("ssl_sessions_reused"), SQLDataType.VARCHAR(1024), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>sys.session_ssl_status</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sys.session_ssl_status</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sys.session_ssl_status</code> table reference
     */
    constructor(): this(DSL.name("session_ssl_status"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, SESSION_SSL_STATUS, null)
    override fun getSchema(): Schema = Sys.SYS
    override fun `as`(alias: String): SessionSslStatus = SessionSslStatus(DSL.name(alias), this)
    override fun `as`(alias: Name): SessionSslStatus = SessionSslStatus(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SessionSslStatus = SessionSslStatus(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SessionSslStatus = SessionSslStatus(name, null)
}
