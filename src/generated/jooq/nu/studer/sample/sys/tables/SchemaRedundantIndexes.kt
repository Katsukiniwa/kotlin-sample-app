/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables


import nu.studer.sample.sys.Sys

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * VIEW
 */
@Suppress("UNCHECKED_CAST")
open class SchemaRedundantIndexes(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Sys.SYS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("VIEW"),
    TableOptions.view("create view `schema_redundant_indexes` as select `redundant_keys`.`table_schema` AS `table_schema`,`redundant_keys`.`table_name` AS `table_name`,`redundant_keys`.`index_name` AS `redundant_index_name`,`redundant_keys`.`index_columns` AS `redundant_index_columns`,`redundant_keys`.`non_unique` AS `redundant_index_non_unique`,`dominant_keys`.`index_name` AS `dominant_index_name`,`dominant_keys`.`index_columns` AS `dominant_index_columns`,`dominant_keys`.`non_unique` AS `dominant_index_non_unique`,if((`redundant_keys`.`subpart_exists` or `dominant_keys`.`subpart_exists`),1,0) AS `subpart_exists`,concat('ALTER TABLE `',`redundant_keys`.`table_schema`,'`.`',`redundant_keys`.`table_name`,'` DROP INDEX `',`redundant_keys`.`index_name`,'`') AS `sql_drop_index` from (`sys`.`x\$schema_flattened_keys` `redundant_keys` join `sys`.`x\$schema_flattened_keys` `dominant_keys` on(((`redundant_keys`.`table_schema` = `dominant_keys`.`table_schema`) and (`redundant_keys`.`table_name` = `dominant_keys`.`table_name`)))) where ((`redundant_keys`.`index_name` <> `dominant_keys`.`index_name`) and (((`redundant_keys`.`index_columns` = `dominant_keys`.`index_columns`) and ((`redundant_keys`.`non_unique` > `dominant_keys`.`non_unique`) or ((`redundant_keys`.`non_unique` = `dominant_keys`.`non_unique`) and (if((`redundant_keys`.`index_name` = 'PRIMARY'),'',`redundant_keys`.`index_name`) > if((`dominant_keys`.`index_name` = 'PRIMARY'),'',`dominant_keys`.`index_name`))))) or ((locate(concat(`redundant_keys`.`index_columns`,','),`dominant_keys`.`index_columns`) = 1) and (`redundant_keys`.`non_unique` = 1)) or ((locate(concat(`dominant_keys`.`index_columns`,','),`redundant_keys`.`index_columns`) = 1) and (`dominant_keys`.`non_unique` = 0))))")
) {
    companion object {

        /**
         * The reference instance of <code>sys.schema_redundant_indexes</code>
         */
        val SCHEMA_REDUNDANT_INDEXES = SchemaRedundantIndexes()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>sys.schema_redundant_indexes.table_schema</code>.
     */
    val TABLE_SCHEMA: TableField<Record, String?> = createField(DSL.name("table_schema"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>sys.schema_redundant_indexes.table_name</code>.
     */
    val TABLE_NAME: TableField<Record, String?> = createField(DSL.name("table_name"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>sys.schema_redundant_indexes.redundant_index_name</code>.
     */
    val REDUNDANT_INDEX_NAME: TableField<Record, String?> = createField(DSL.name("redundant_index_name"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>sys.schema_redundant_indexes.redundant_index_columns</code>.
     */
    val REDUNDANT_INDEX_COLUMNS: TableField<Record, String?> = createField(DSL.name("redundant_index_columns"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.schema_redundant_indexes.redundant_index_non_unique</code>.
     */
    val REDUNDANT_INDEX_NON_UNIQUE: TableField<Record, Long?> = createField(DSL.name("redundant_index_non_unique"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>sys.schema_redundant_indexes.dominant_index_name</code>.
     */
    val DOMINANT_INDEX_NAME: TableField<Record, String?> = createField(DSL.name("dominant_index_name"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>sys.schema_redundant_indexes.dominant_index_columns</code>.
     */
    val DOMINANT_INDEX_COLUMNS: TableField<Record, String?> = createField(DSL.name("dominant_index_columns"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.schema_redundant_indexes.dominant_index_non_unique</code>.
     */
    val DOMINANT_INDEX_NON_UNIQUE: TableField<Record, Long?> = createField(DSL.name("dominant_index_non_unique"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>sys.schema_redundant_indexes.subpart_exists</code>.
     */
    val SUBPART_EXISTS: TableField<Record, Int?> = createField(DSL.name("subpart_exists"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>sys.schema_redundant_indexes.sql_drop_index</code>.
     */
    val SQL_DROP_INDEX: TableField<Record, String?> = createField(DSL.name("sql_drop_index"), SQLDataType.VARCHAR(223), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>sys.schema_redundant_indexes</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sys.schema_redundant_indexes</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sys.schema_redundant_indexes</code> table reference
     */
    constructor(): this(DSL.name("schema_redundant_indexes"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, SCHEMA_REDUNDANT_INDEXES, null)
    override fun getSchema(): Schema = Sys.SYS
    override fun `as`(alias: String): SchemaRedundantIndexes = SchemaRedundantIndexes(DSL.name(alias), this)
    override fun `as`(alias: Name): SchemaRedundantIndexes = SchemaRedundantIndexes(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SchemaRedundantIndexes = SchemaRedundantIndexes(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SchemaRedundantIndexes = SchemaRedundantIndexes(name, null)
}
