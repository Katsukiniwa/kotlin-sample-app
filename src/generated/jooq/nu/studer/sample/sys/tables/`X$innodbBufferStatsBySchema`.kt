/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables


import java.math.BigInteger

import nu.studer.sample.sys.Sys

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * VIEW
 */
@Suppress("UNCHECKED_CAST")
open class `X$innodbBufferStatsBySchema`(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Sys.SYS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("VIEW"),
    TableOptions.view("create view `x\$innodb_buffer_stats_by_schema` as select if((locate('.',`ibp`.`TABLE_NAME`) = 0),'InnoDB System',replace(substring_index(`ibp`.`TABLE_NAME`,'.',1),'`','')) AS `object_schema`,sum(if((`ibp`.`COMPRESSED_SIZE` = 0),16384,`ibp`.`COMPRESSED_SIZE`)) AS `allocated`,sum(`ibp`.`DATA_SIZE`) AS `data`,count(`ibp`.`PAGE_NUMBER`) AS `pages`,count(if((`ibp`.`IS_HASHED` = 'YES'),1,NULL)) AS `pages_hashed`,count(if((`ibp`.`IS_OLD` = 'YES'),1,NULL)) AS `pages_old`,round(ifnull((sum(`ibp`.`NUMBER_RECORDS`) / nullif(count(distinct `ibp`.`INDEX_NAME`),0)),0),0) AS `rows_cached` from `information_schema`.`innodb_buffer_page` `ibp` where (`ibp`.`TABLE_NAME` is not null) group by `object_schema` order by sum(if((`ibp`.`COMPRESSED_SIZE` = 0),16384,`ibp`.`COMPRESSED_SIZE`)) desc")
) {
    companion object {

        /**
         * The reference instance of <code>sys.x$innodb_buffer_stats_by_schema</code>
         */
        val `X$INNODB_BUFFER_STATS_BY_SCHEMA` = `X$innodbBufferStatsBySchema`()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>sys.x$innodb_buffer_stats_by_schema.object_schema</code>.
     */
    val OBJECT_SCHEMA: TableField<Record, String?> = createField(DSL.name("object_schema"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.x$innodb_buffer_stats_by_schema.allocated</code>.
     */
    val ALLOCATED: TableField<Record, BigInteger?> = createField(DSL.name("allocated"), SQLDataType.DECIMAL_INTEGER(43), this, "")

    /**
     * The column <code>sys.x$innodb_buffer_stats_by_schema.data</code>.
     */
    val DATA: TableField<Record, BigInteger?> = createField(DSL.name("data"), SQLDataType.DECIMAL_INTEGER(43), this, "")

    /**
     * The column <code>sys.x$innodb_buffer_stats_by_schema.pages</code>.
     */
    val PAGES: TableField<Record, Long?> = createField(DSL.name("pages"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "")

    /**
     * The column <code>sys.x$innodb_buffer_stats_by_schema.pages_hashed</code>.
     */
    val PAGES_HASHED: TableField<Record, Long?> = createField(DSL.name("pages_hashed"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "")

    /**
     * The column <code>sys.x$innodb_buffer_stats_by_schema.pages_old</code>.
     */
    val PAGES_OLD: TableField<Record, Long?> = createField(DSL.name("pages_old"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "")

    /**
     * The column <code>sys.x$innodb_buffer_stats_by_schema.rows_cached</code>.
     */
    val ROWS_CACHED: TableField<Record, BigInteger?> = createField(DSL.name("rows_cached"), SQLDataType.DECIMAL_INTEGER(44).nullable(false).defaultValue(DSL.inline("0", SQLDataType.DECIMAL_INTEGER)), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>sys.x$innodb_buffer_stats_by_schema</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sys.x$innodb_buffer_stats_by_schema</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sys.x$innodb_buffer_stats_by_schema</code> table reference
     */
    constructor(): this(DSL.name("x\$innodb_buffer_stats_by_schema"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, `X$INNODB_BUFFER_STATS_BY_SCHEMA`, null)
    override fun getSchema(): Schema = Sys.SYS
    override fun `as`(alias: String): `X$innodbBufferStatsBySchema` = `X$innodbBufferStatsBySchema`(DSL.name(alias), this)
    override fun `as`(alias: Name): `X$innodbBufferStatsBySchema` = `X$innodbBufferStatsBySchema`(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): `X$innodbBufferStatsBySchema` = `X$innodbBufferStatsBySchema`(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): `X$innodbBufferStatsBySchema` = `X$innodbBufferStatsBySchema`(name, null)
}
