/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables


import java.math.BigInteger

import nu.studer.sample.sys.Sys

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * VIEW
 */
@Suppress("UNCHECKED_CAST")
open class WaitClassesGlobalByLatency(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Sys.SYS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("VIEW"),
    TableOptions.view("create view `wait_classes_global_by_latency` as select substring_index(`performance_schema`.`events_waits_summary_global_by_event_name`.`EVENT_NAME`,'/',3) AS `event_class`,sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`COUNT_STAR`) AS `total`,`sys`.`format_time`(sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT`)) AS `total_latency`,`sys`.`format_time`(min(`performance_schema`.`events_waits_summary_global_by_event_name`.`MIN_TIMER_WAIT`)) AS `min_latency`,`sys`.`format_time`(ifnull((sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT`) / nullif(sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`COUNT_STAR`),0)),0)) AS `avg_latency`,`sys`.`format_time`(max(`performance_schema`.`events_waits_summary_global_by_event_name`.`MAX_TIMER_WAIT`)) AS `max_latency` from `performance_schema`.`events_waits_summary_global_by_event_name` where ((`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT` > 0) and (`performance_schema`.`events_waits_summary_global_by_event_name`.`EVENT_NAME` <> 'idle')) group by substring_index(`performance_schema`.`events_waits_summary_global_by_event_name`.`EVENT_NAME`,'/',3) order by sum(`performance_schema`.`events_waits_summary_global_by_event_name`.`SUM_TIMER_WAIT`) desc")
) {
    companion object {

        /**
         * The reference instance of <code>sys.wait_classes_global_by_latency</code>
         */
        val WAIT_CLASSES_GLOBAL_BY_LATENCY = WaitClassesGlobalByLatency()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>sys.wait_classes_global_by_latency.event_class</code>.
     */
    val EVENT_CLASS: TableField<Record, String?> = createField(DSL.name("event_class"), SQLDataType.VARCHAR(128), this, "")

    /**
     * The column <code>sys.wait_classes_global_by_latency.total</code>.
     */
    val TOTAL: TableField<Record, BigInteger?> = createField(DSL.name("total"), SQLDataType.DECIMAL_INTEGER(42), this, "")

    /**
     * The column <code>sys.wait_classes_global_by_latency.total_latency</code>.
     */
    val TOTAL_LATENCY: TableField<Record, String?> = createField(DSL.name("total_latency"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.wait_classes_global_by_latency.min_latency</code>.
     */
    val MIN_LATENCY: TableField<Record, String?> = createField(DSL.name("min_latency"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.wait_classes_global_by_latency.avg_latency</code>.
     */
    val AVG_LATENCY: TableField<Record, String?> = createField(DSL.name("avg_latency"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.wait_classes_global_by_latency.max_latency</code>.
     */
    val MAX_LATENCY: TableField<Record, String?> = createField(DSL.name("max_latency"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>sys.wait_classes_global_by_latency</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sys.wait_classes_global_by_latency</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sys.wait_classes_global_by_latency</code> table reference
     */
    constructor(): this(DSL.name("wait_classes_global_by_latency"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, WAIT_CLASSES_GLOBAL_BY_LATENCY, null)
    override fun getSchema(): Schema = Sys.SYS
    override fun `as`(alias: String): WaitClassesGlobalByLatency = WaitClassesGlobalByLatency(DSL.name(alias), this)
    override fun `as`(alias: Name): WaitClassesGlobalByLatency = WaitClassesGlobalByLatency(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): WaitClassesGlobalByLatency = WaitClassesGlobalByLatency(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): WaitClassesGlobalByLatency = WaitClassesGlobalByLatency(name, null)
}
