/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables


import nu.studer.sample.sys.Sys

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * VIEW
 */
@Suppress("UNCHECKED_CAST")
open class HostSummaryByFileIoType(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Sys.SYS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("VIEW"),
    TableOptions.view("create view `host_summary_by_file_io_type` as select if(isnull(`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST`),'background',`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST`) AS `host`,`performance_schema`.`events_waits_summary_by_host_by_event_name`.`EVENT_NAME` AS `event_name`,`performance_schema`.`events_waits_summary_by_host_by_event_name`.`COUNT_STAR` AS `total`,`sys`.`format_time`(`performance_schema`.`events_waits_summary_by_host_by_event_name`.`SUM_TIMER_WAIT`) AS `total_latency`,`sys`.`format_time`(`performance_schema`.`events_waits_summary_by_host_by_event_name`.`MAX_TIMER_WAIT`) AS `max_latency` from `performance_schema`.`events_waits_summary_by_host_by_event_name` where ((`performance_schema`.`events_waits_summary_by_host_by_event_name`.`EVENT_NAME` like 'wait/io/file%') and (`performance_schema`.`events_waits_summary_by_host_by_event_name`.`COUNT_STAR` > 0)) order by if(isnull(`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST`),'background',`performance_schema`.`events_waits_summary_by_host_by_event_name`.`HOST`),`performance_schema`.`events_waits_summary_by_host_by_event_name`.`SUM_TIMER_WAIT` desc")
) {
    companion object {

        /**
         * The reference instance of <code>sys.host_summary_by_file_io_type</code>
         */
        val HOST_SUMMARY_BY_FILE_IO_TYPE = HostSummaryByFileIoType()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>sys.host_summary_by_file_io_type.host</code>.
     */
    val HOST: TableField<Record, String?> = createField(DSL.name("host"), SQLDataType.VARCHAR(60), this, "")

    /**
     * The column <code>sys.host_summary_by_file_io_type.event_name</code>.
     */
    val EVENT_NAME: TableField<Record, String?> = createField(DSL.name("event_name"), SQLDataType.VARCHAR(128).nullable(false), this, "")

    /**
     * The column <code>sys.host_summary_by_file_io_type.total</code>.
     */
    val TOTAL: TableField<Record, ULong?> = createField(DSL.name("total"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.host_summary_by_file_io_type.total_latency</code>.
     */
    val TOTAL_LATENCY: TableField<Record, String?> = createField(DSL.name("total_latency"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.host_summary_by_file_io_type.max_latency</code>.
     */
    val MAX_LATENCY: TableField<Record, String?> = createField(DSL.name("max_latency"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>sys.host_summary_by_file_io_type</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sys.host_summary_by_file_io_type</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sys.host_summary_by_file_io_type</code> table reference
     */
    constructor(): this(DSL.name("host_summary_by_file_io_type"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, HOST_SUMMARY_BY_FILE_IO_TYPE, null)
    override fun getSchema(): Schema = Sys.SYS
    override fun `as`(alias: String): HostSummaryByFileIoType = HostSummaryByFileIoType(DSL.name(alias), this)
    override fun `as`(alias: Name): HostSummaryByFileIoType = HostSummaryByFileIoType(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): HostSummaryByFileIoType = HostSummaryByFileIoType(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): HostSummaryByFileIoType = HostSummaryByFileIoType(name, null)
}
