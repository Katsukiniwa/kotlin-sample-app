/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables


import java.math.BigInteger

import nu.studer.sample.sys.Sys

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * VIEW
 */
@Suppress("UNCHECKED_CAST")
open class SchemaTableStatisticsWithBuffer(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Sys.SYS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("VIEW"),
    TableOptions.view("create view `schema_table_statistics_with_buffer` as select `pst`.`OBJECT_SCHEMA` AS `table_schema`,`pst`.`OBJECT_NAME` AS `table_name`,`pst`.`COUNT_FETCH` AS `rows_fetched`,`sys`.`format_time`(`pst`.`SUM_TIMER_FETCH`) AS `fetch_latency`,`pst`.`COUNT_INSERT` AS `rows_inserted`,`sys`.`format_time`(`pst`.`SUM_TIMER_INSERT`) AS `insert_latency`,`pst`.`COUNT_UPDATE` AS `rows_updated`,`sys`.`format_time`(`pst`.`SUM_TIMER_UPDATE`) AS `update_latency`,`pst`.`COUNT_DELETE` AS `rows_deleted`,`sys`.`format_time`(`pst`.`SUM_TIMER_DELETE`) AS `delete_latency`,`fsbi`.`count_read` AS `io_read_requests`,`sys`.`format_bytes`(`fsbi`.`sum_number_of_bytes_read`) AS `io_read`,`sys`.`format_time`(`fsbi`.`sum_timer_read`) AS `io_read_latency`,`fsbi`.`count_write` AS `io_write_requests`,`sys`.`format_bytes`(`fsbi`.`sum_number_of_bytes_write`) AS `io_write`,`sys`.`format_time`(`fsbi`.`sum_timer_write`) AS `io_write_latency`,`fsbi`.`count_misc` AS `io_misc_requests`,`sys`.`format_time`(`fsbi`.`sum_timer_misc`) AS `io_misc_latency`,`sys`.`format_bytes`(`ibp`.`allocated`) AS `innodb_buffer_allocated`,`sys`.`format_bytes`(`ibp`.`data`) AS `innodb_buffer_data`,`sys`.`format_bytes`((`ibp`.`allocated` - `ibp`.`data`)) AS `innodb_buffer_free`,`ibp`.`pages` AS `innodb_buffer_pages`,`ibp`.`pages_hashed` AS `innodb_buffer_pages_hashed`,`ibp`.`pages_old` AS `innodb_buffer_pages_old`,`ibp`.`rows_cached` AS `innodb_buffer_rows_cached` from ((`performance_schema`.`table_io_waits_summary_by_table` `pst` left join `sys`.`x\$ps_schema_table_statistics_io` `fsbi` on(((`pst`.`OBJECT_SCHEMA` = `fsbi`.`table_schema`) and (`pst`.`OBJECT_NAME` = `fsbi`.`table_name`)))) left join `sys`.`x\$innodb_buffer_stats_by_table` `ibp` on(((`pst`.`OBJECT_SCHEMA` = `ibp`.`object_schema`) and (`pst`.`OBJECT_NAME` = `ibp`.`object_name`)))) order by `pst`.`SUM_TIMER_WAIT` desc")
) {
    companion object {

        /**
         * The reference instance of <code>sys.schema_table_statistics_with_buffer</code>
         */
        val SCHEMA_TABLE_STATISTICS_WITH_BUFFER = SchemaTableStatisticsWithBuffer()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.table_schema</code>.
     */
    val TABLE_SCHEMA: TableField<Record, String?> = createField(DSL.name("table_schema"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.table_name</code>.
     */
    val TABLE_NAME: TableField<Record, String?> = createField(DSL.name("table_name"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.rows_fetched</code>.
     */
    val ROWS_FETCHED: TableField<Record, ULong?> = createField(DSL.name("rows_fetched"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.fetch_latency</code>.
     */
    val FETCH_LATENCY: TableField<Record, String?> = createField(DSL.name("fetch_latency"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.rows_inserted</code>.
     */
    val ROWS_INSERTED: TableField<Record, ULong?> = createField(DSL.name("rows_inserted"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.insert_latency</code>.
     */
    val INSERT_LATENCY: TableField<Record, String?> = createField(DSL.name("insert_latency"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.rows_updated</code>.
     */
    val ROWS_UPDATED: TableField<Record, ULong?> = createField(DSL.name("rows_updated"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.update_latency</code>.
     */
    val UPDATE_LATENCY: TableField<Record, String?> = createField(DSL.name("update_latency"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.rows_deleted</code>.
     */
    val ROWS_DELETED: TableField<Record, ULong?> = createField(DSL.name("rows_deleted"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.delete_latency</code>.
     */
    val DELETE_LATENCY: TableField<Record, String?> = createField(DSL.name("delete_latency"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.io_read_requests</code>.
     */
    val IO_READ_REQUESTS: TableField<Record, BigInteger?> = createField(DSL.name("io_read_requests"), SQLDataType.DECIMAL_INTEGER(42), this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.io_read</code>.
     */
    val IO_READ: TableField<Record, String?> = createField(DSL.name("io_read"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.io_read_latency</code>.
     */
    val IO_READ_LATENCY: TableField<Record, String?> = createField(DSL.name("io_read_latency"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.io_write_requests</code>.
     */
    val IO_WRITE_REQUESTS: TableField<Record, BigInteger?> = createField(DSL.name("io_write_requests"), SQLDataType.DECIMAL_INTEGER(42), this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.io_write</code>.
     */
    val IO_WRITE: TableField<Record, String?> = createField(DSL.name("io_write"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.io_write_latency</code>.
     */
    val IO_WRITE_LATENCY: TableField<Record, String?> = createField(DSL.name("io_write_latency"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.io_misc_requests</code>.
     */
    val IO_MISC_REQUESTS: TableField<Record, BigInteger?> = createField(DSL.name("io_misc_requests"), SQLDataType.DECIMAL_INTEGER(42), this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.io_misc_latency</code>.
     */
    val IO_MISC_LATENCY: TableField<Record, String?> = createField(DSL.name("io_misc_latency"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.innodb_buffer_allocated</code>.
     */
    val INNODB_BUFFER_ALLOCATED: TableField<Record, String?> = createField(DSL.name("innodb_buffer_allocated"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.innodb_buffer_data</code>.
     */
    val INNODB_BUFFER_DATA: TableField<Record, String?> = createField(DSL.name("innodb_buffer_data"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.innodb_buffer_free</code>.
     */
    val INNODB_BUFFER_FREE: TableField<Record, String?> = createField(DSL.name("innodb_buffer_free"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.innodb_buffer_pages</code>.
     */
    val INNODB_BUFFER_PAGES: TableField<Record, Long?> = createField(DSL.name("innodb_buffer_pages"), SQLDataType.BIGINT.defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.innodb_buffer_pages_hashed</code>.
     */
    val INNODB_BUFFER_PAGES_HASHED: TableField<Record, Long?> = createField(DSL.name("innodb_buffer_pages_hashed"), SQLDataType.BIGINT.defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.innodb_buffer_pages_old</code>.
     */
    val INNODB_BUFFER_PAGES_OLD: TableField<Record, Long?> = createField(DSL.name("innodb_buffer_pages_old"), SQLDataType.BIGINT.defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "")

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.innodb_buffer_rows_cached</code>.
     */
    val INNODB_BUFFER_ROWS_CACHED: TableField<Record, BigInteger?> = createField(DSL.name("innodb_buffer_rows_cached"), SQLDataType.DECIMAL_INTEGER(44).defaultValue(DSL.inline("0", SQLDataType.DECIMAL_INTEGER)), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>sys.schema_table_statistics_with_buffer</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sys.schema_table_statistics_with_buffer</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sys.schema_table_statistics_with_buffer</code> table reference
     */
    constructor(): this(DSL.name("schema_table_statistics_with_buffer"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, SCHEMA_TABLE_STATISTICS_WITH_BUFFER, null)
    override fun getSchema(): Schema = Sys.SYS
    override fun `as`(alias: String): SchemaTableStatisticsWithBuffer = SchemaTableStatisticsWithBuffer(DSL.name(alias), this)
    override fun `as`(alias: Name): SchemaTableStatisticsWithBuffer = SchemaTableStatisticsWithBuffer(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SchemaTableStatisticsWithBuffer = SchemaTableStatisticsWithBuffer(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SchemaTableStatisticsWithBuffer = SchemaTableStatisticsWithBuffer(name, null)
}
