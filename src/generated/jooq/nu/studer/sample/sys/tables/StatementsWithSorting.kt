/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables


import java.math.BigInteger
import java.time.LocalDateTime

import nu.studer.sample.sys.Sys

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * VIEW
 */
@Suppress("UNCHECKED_CAST")
open class StatementsWithSorting(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Sys.SYS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("VIEW"),
    TableOptions.view("create view `statements_with_sorting` as select `sys`.`format_statement`(`performance_schema`.`events_statements_summary_by_digest`.`DIGEST_TEXT`) AS `query`,`performance_schema`.`events_statements_summary_by_digest`.`SCHEMA_NAME` AS `db`,`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR` AS `exec_count`,`sys`.`format_time`(`performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT`) AS `total_latency`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_MERGE_PASSES` AS `sort_merge_passes`,round(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_MERGE_PASSES` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0),0) AS `avg_sort_merges`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_SCAN` AS `sorts_using_scans`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_RANGE` AS `sort_using_range`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_ROWS` AS `rows_sorted`,round(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_ROWS` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0),0) AS `avg_rows_sorted`,`performance_schema`.`events_statements_summary_by_digest`.`FIRST_SEEN` AS `first_seen`,`performance_schema`.`events_statements_summary_by_digest`.`LAST_SEEN` AS `last_seen`,`performance_schema`.`events_statements_summary_by_digest`.`DIGEST` AS `digest` from `performance_schema`.`events_statements_summary_by_digest` where (`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_ROWS` > 0) order by `performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT` desc")
) {
    companion object {

        /**
         * The reference instance of <code>sys.statements_with_sorting</code>
         */
        val STATEMENTS_WITH_SORTING = StatementsWithSorting()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>sys.statements_with_sorting.query</code>.
     */
    val QUERY: TableField<Record, String?> = createField(DSL.name("query"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.statements_with_sorting.db</code>.
     */
    val DB: TableField<Record, String?> = createField(DSL.name("db"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>sys.statements_with_sorting.exec_count</code>.
     */
    val EXEC_COUNT: TableField<Record, ULong?> = createField(DSL.name("exec_count"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.statements_with_sorting.total_latency</code>.
     */
    val TOTAL_LATENCY: TableField<Record, String?> = createField(DSL.name("total_latency"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.statements_with_sorting.sort_merge_passes</code>.
     */
    val SORT_MERGE_PASSES: TableField<Record, ULong?> = createField(DSL.name("sort_merge_passes"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.statements_with_sorting.avg_sort_merges</code>.
     */
    val AVG_SORT_MERGES: TableField<Record, BigInteger?> = createField(DSL.name("avg_sort_merges"), SQLDataType.DECIMAL_INTEGER(21).nullable(false).defaultValue(DSL.inline("0", SQLDataType.DECIMAL_INTEGER)), this, "")

    /**
     * The column <code>sys.statements_with_sorting.sorts_using_scans</code>.
     */
    val SORTS_USING_SCANS: TableField<Record, ULong?> = createField(DSL.name("sorts_using_scans"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.statements_with_sorting.sort_using_range</code>.
     */
    val SORT_USING_RANGE: TableField<Record, ULong?> = createField(DSL.name("sort_using_range"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.statements_with_sorting.rows_sorted</code>.
     */
    val ROWS_SORTED: TableField<Record, ULong?> = createField(DSL.name("rows_sorted"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.statements_with_sorting.avg_rows_sorted</code>.
     */
    val AVG_ROWS_SORTED: TableField<Record, BigInteger?> = createField(DSL.name("avg_rows_sorted"), SQLDataType.DECIMAL_INTEGER(21).nullable(false).defaultValue(DSL.inline("0", SQLDataType.DECIMAL_INTEGER)), this, "")

    /**
     * The column <code>sys.statements_with_sorting.first_seen</code>.
     */
    val FIRST_SEEN: TableField<Record, LocalDateTime?> = createField(DSL.name("first_seen"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>sys.statements_with_sorting.last_seen</code>.
     */
    val LAST_SEEN: TableField<Record, LocalDateTime?> = createField(DSL.name("last_seen"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>sys.statements_with_sorting.digest</code>.
     */
    val DIGEST: TableField<Record, String?> = createField(DSL.name("digest"), SQLDataType.VARCHAR(32), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>sys.statements_with_sorting</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sys.statements_with_sorting</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sys.statements_with_sorting</code> table reference
     */
    constructor(): this(DSL.name("statements_with_sorting"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, STATEMENTS_WITH_SORTING, null)
    override fun getSchema(): Schema = Sys.SYS
    override fun `as`(alias: String): StatementsWithSorting = StatementsWithSorting(DSL.name(alias), this)
    override fun `as`(alias: Name): StatementsWithSorting = StatementsWithSorting(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): StatementsWithSorting = StatementsWithSorting(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): StatementsWithSorting = StatementsWithSorting(name, null)
}
