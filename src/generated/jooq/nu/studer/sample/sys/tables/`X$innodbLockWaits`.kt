/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables


import java.time.LocalDateTime
import java.time.LocalTime

import nu.studer.sample.sys.Sys

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * VIEW
 */
@Suppress("UNCHECKED_CAST")
open class `X$innodbLockWaits`(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Sys.SYS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("VIEW"),
    TableOptions.view("create view `x\$innodb_lock_waits` as select `r`.`trx_wait_started` AS `wait_started`,timediff(now(),`r`.`trx_wait_started`) AS `wait_age`,timestampdiff(SECOND,`r`.`trx_wait_started`,now()) AS `wait_age_secs`,`rl`.`lock_table` AS `locked_table`,`rl`.`lock_index` AS `locked_index`,`rl`.`lock_type` AS `locked_type`,`r`.`trx_id` AS `waiting_trx_id`,`r`.`trx_started` AS `waiting_trx_started`,timediff(now(),`r`.`trx_started`) AS `waiting_trx_age`,`r`.`trx_rows_locked` AS `waiting_trx_rows_locked`,`r`.`trx_rows_modified` AS `waiting_trx_rows_modified`,`r`.`trx_mysql_thread_id` AS `waiting_pid`,`r`.`trx_query` AS `waiting_query`,`rl`.`lock_id` AS `waiting_lock_id`,`rl`.`lock_mode` AS `waiting_lock_mode`,`b`.`trx_id` AS `blocking_trx_id`,`b`.`trx_mysql_thread_id` AS `blocking_pid`,`b`.`trx_query` AS `blocking_query`,`bl`.`lock_id` AS `blocking_lock_id`,`bl`.`lock_mode` AS `blocking_lock_mode`,`b`.`trx_started` AS `blocking_trx_started`,timediff(now(),`b`.`trx_started`) AS `blocking_trx_age`,`b`.`trx_rows_locked` AS `blocking_trx_rows_locked`,`b`.`trx_rows_modified` AS `blocking_trx_rows_modified`,concat('KILL QUERY ',`b`.`trx_mysql_thread_id`) AS `sql_kill_blocking_query`,concat('KILL ',`b`.`trx_mysql_thread_id`) AS `sql_kill_blocking_connection` from ((((`information_schema`.`innodb_lock_waits` `w` join `information_schema`.`innodb_trx` `b` on((`b`.`trx_id` = `w`.`blocking_trx_id`))) join `information_schema`.`innodb_trx` `r` on((`r`.`trx_id` = `w`.`requesting_trx_id`))) join `information_schema`.`innodb_locks` `bl` on((`bl`.`lock_id` = `w`.`blocking_lock_id`))) join `information_schema`.`innodb_locks` `rl` on((`rl`.`lock_id` = `w`.`requested_lock_id`))) order by `r`.`trx_wait_started`")
) {
    companion object {

        /**
         * The reference instance of <code>sys.x$innodb_lock_waits</code>
         */
        val `X$INNODB_LOCK_WAITS` = `X$innodbLockWaits`()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>sys.x$innodb_lock_waits.wait_started</code>.
     */
    val WAIT_STARTED: TableField<Record, LocalDateTime?> = createField(DSL.name("wait_started"), SQLDataType.LOCALDATETIME(0), this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.wait_age</code>.
     */
    val WAIT_AGE: TableField<Record, LocalTime?> = createField(DSL.name("wait_age"), SQLDataType.LOCALTIME, this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.wait_age_secs</code>.
     */
    val WAIT_AGE_SECS: TableField<Record, Long?> = createField(DSL.name("wait_age_secs"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.locked_table</code>.
     */
    val LOCKED_TABLE: TableField<Record, String?> = createField(DSL.name("locked_table"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.locked_index</code>.
     */
    val LOCKED_INDEX: TableField<Record, String?> = createField(DSL.name("locked_index"), SQLDataType.VARCHAR(1024), this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.locked_type</code>.
     */
    val LOCKED_TYPE: TableField<Record, String?> = createField(DSL.name("locked_type"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.waiting_trx_id</code>.
     */
    val WAITING_TRX_ID: TableField<Record, String?> = createField(DSL.name("waiting_trx_id"), SQLDataType.VARCHAR(18).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.waiting_trx_started</code>.
     */
    val WAITING_TRX_STARTED: TableField<Record, LocalDateTime?> = createField(DSL.name("waiting_trx_started"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.waiting_trx_age</code>.
     */
    val WAITING_TRX_AGE: TableField<Record, LocalTime?> = createField(DSL.name("waiting_trx_age"), SQLDataType.LOCALTIME, this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.waiting_trx_rows_locked</code>.
     */
    val WAITING_TRX_ROWS_LOCKED: TableField<Record, ULong?> = createField(DSL.name("waiting_trx_rows_locked"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.waiting_trx_rows_modified</code>.
     */
    val WAITING_TRX_ROWS_MODIFIED: TableField<Record, ULong?> = createField(DSL.name("waiting_trx_rows_modified"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.waiting_pid</code>.
     */
    val WAITING_PID: TableField<Record, ULong?> = createField(DSL.name("waiting_pid"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.waiting_query</code>.
     */
    val WAITING_QUERY: TableField<Record, String?> = createField(DSL.name("waiting_query"), SQLDataType.VARCHAR(1024), this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.waiting_lock_id</code>.
     */
    val WAITING_LOCK_ID: TableField<Record, String?> = createField(DSL.name("waiting_lock_id"), SQLDataType.VARCHAR(81).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.waiting_lock_mode</code>.
     */
    val WAITING_LOCK_MODE: TableField<Record, String?> = createField(DSL.name("waiting_lock_mode"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.blocking_trx_id</code>.
     */
    val BLOCKING_TRX_ID: TableField<Record, String?> = createField(DSL.name("blocking_trx_id"), SQLDataType.VARCHAR(18).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.blocking_pid</code>.
     */
    val BLOCKING_PID: TableField<Record, ULong?> = createField(DSL.name("blocking_pid"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.blocking_query</code>.
     */
    val BLOCKING_QUERY: TableField<Record, String?> = createField(DSL.name("blocking_query"), SQLDataType.VARCHAR(1024), this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.blocking_lock_id</code>.
     */
    val BLOCKING_LOCK_ID: TableField<Record, String?> = createField(DSL.name("blocking_lock_id"), SQLDataType.VARCHAR(81).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.blocking_lock_mode</code>.
     */
    val BLOCKING_LOCK_MODE: TableField<Record, String?> = createField(DSL.name("blocking_lock_mode"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.blocking_trx_started</code>.
     */
    val BLOCKING_TRX_STARTED: TableField<Record, LocalDateTime?> = createField(DSL.name("blocking_trx_started"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.blocking_trx_age</code>.
     */
    val BLOCKING_TRX_AGE: TableField<Record, LocalTime?> = createField(DSL.name("blocking_trx_age"), SQLDataType.LOCALTIME, this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.blocking_trx_rows_locked</code>.
     */
    val BLOCKING_TRX_ROWS_LOCKED: TableField<Record, ULong?> = createField(DSL.name("blocking_trx_rows_locked"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.blocking_trx_rows_modified</code>.
     */
    val BLOCKING_TRX_ROWS_MODIFIED: TableField<Record, ULong?> = createField(DSL.name("blocking_trx_rows_modified"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.sql_kill_blocking_query</code>.
     */
    val SQL_KILL_BLOCKING_QUERY: TableField<Record, String?> = createField(DSL.name("sql_kill_blocking_query"), SQLDataType.VARCHAR(32), this, "")

    /**
     * The column <code>sys.x$innodb_lock_waits.sql_kill_blocking_connection</code>.
     */
    val SQL_KILL_BLOCKING_CONNECTION: TableField<Record, String?> = createField(DSL.name("sql_kill_blocking_connection"), SQLDataType.VARCHAR(26), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>sys.x$innodb_lock_waits</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sys.x$innodb_lock_waits</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sys.x$innodb_lock_waits</code> table reference
     */
    constructor(): this(DSL.name("x\$innodb_lock_waits"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, `X$INNODB_LOCK_WAITS`, null)
    override fun getSchema(): Schema = Sys.SYS
    override fun `as`(alias: String): `X$innodbLockWaits` = `X$innodbLockWaits`(DSL.name(alias), this)
    override fun `as`(alias: Name): `X$innodbLockWaits` = `X$innodbLockWaits`(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): `X$innodbLockWaits` = `X$innodbLockWaits`(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): `X$innodbLockWaits` = `X$innodbLockWaits`(name, null)
}
