/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables


import java.math.BigInteger
import java.time.LocalDateTime

import nu.studer.sample.sys.Sys

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * VIEW
 */
@Suppress("UNCHECKED_CAST")
open class `X$statementAnalysis`(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Sys.SYS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("VIEW"),
    TableOptions.view("create view `x\$statement_analysis` as select `performance_schema`.`events_statements_summary_by_digest`.`DIGEST_TEXT` AS `query`,`performance_schema`.`events_statements_summary_by_digest`.`SCHEMA_NAME` AS `db`,if(((`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_GOOD_INDEX_USED` > 0) or (`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_INDEX_USED` > 0)),'*','') AS `full_scan`,`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR` AS `exec_count`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ERRORS` AS `err_count`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_WARNINGS` AS `warn_count`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT` AS `total_latency`,`performance_schema`.`events_statements_summary_by_digest`.`MAX_TIMER_WAIT` AS `max_latency`,`performance_schema`.`events_statements_summary_by_digest`.`AVG_TIMER_WAIT` AS `avg_latency`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_LOCK_TIME` AS `lock_latency`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_SENT` AS `rows_sent`,round(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_SENT` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0),0) AS `rows_sent_avg`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_EXAMINED` AS `rows_examined`,round(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_EXAMINED` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0),0) AS `rows_examined_avg`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_AFFECTED` AS `rows_affected`,round(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_AFFECTED` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0),0) AS `rows_affected_avg`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_TABLES` AS `tmp_tables`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_DISK_TABLES` AS `tmp_disk_tables`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_ROWS` AS `rows_sorted`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_MERGE_PASSES` AS `sort_merge_passes`,`performance_schema`.`events_statements_summary_by_digest`.`DIGEST` AS `digest`,`performance_schema`.`events_statements_summary_by_digest`.`FIRST_SEEN` AS `first_seen`,`performance_schema`.`events_statements_summary_by_digest`.`LAST_SEEN` AS `last_seen` from `performance_schema`.`events_statements_summary_by_digest` order by `performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT` desc")
) {
    companion object {

        /**
         * The reference instance of <code>sys.x$statement_analysis</code>
         */
        val `X$STATEMENT_ANALYSIS` = `X$statementAnalysis`()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>sys.x$statement_analysis.query</code>.
     */
    val QUERY: TableField<Record, String?> = createField(DSL.name("query"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.x$statement_analysis.db</code>.
     */
    val DB: TableField<Record, String?> = createField(DSL.name("db"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>sys.x$statement_analysis.full_scan</code>.
     */
    val FULL_SCAN: TableField<Record, String?> = createField(DSL.name("full_scan"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>sys.x$statement_analysis.exec_count</code>.
     */
    val EXEC_COUNT: TableField<Record, ULong?> = createField(DSL.name("exec_count"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.x$statement_analysis.err_count</code>.
     */
    val ERR_COUNT: TableField<Record, ULong?> = createField(DSL.name("err_count"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.x$statement_analysis.warn_count</code>.
     */
    val WARN_COUNT: TableField<Record, ULong?> = createField(DSL.name("warn_count"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.x$statement_analysis.total_latency</code>.
     */
    val TOTAL_LATENCY: TableField<Record, ULong?> = createField(DSL.name("total_latency"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.x$statement_analysis.max_latency</code>.
     */
    val MAX_LATENCY: TableField<Record, ULong?> = createField(DSL.name("max_latency"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.x$statement_analysis.avg_latency</code>.
     */
    val AVG_LATENCY: TableField<Record, ULong?> = createField(DSL.name("avg_latency"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.x$statement_analysis.lock_latency</code>.
     */
    val LOCK_LATENCY: TableField<Record, ULong?> = createField(DSL.name("lock_latency"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.x$statement_analysis.rows_sent</code>.
     */
    val ROWS_SENT: TableField<Record, ULong?> = createField(DSL.name("rows_sent"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.x$statement_analysis.rows_sent_avg</code>.
     */
    val ROWS_SENT_AVG: TableField<Record, BigInteger?> = createField(DSL.name("rows_sent_avg"), SQLDataType.DECIMAL_INTEGER(21).nullable(false).defaultValue(DSL.inline("0", SQLDataType.DECIMAL_INTEGER)), this, "")

    /**
     * The column <code>sys.x$statement_analysis.rows_examined</code>.
     */
    val ROWS_EXAMINED: TableField<Record, ULong?> = createField(DSL.name("rows_examined"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.x$statement_analysis.rows_examined_avg</code>.
     */
    val ROWS_EXAMINED_AVG: TableField<Record, BigInteger?> = createField(DSL.name("rows_examined_avg"), SQLDataType.DECIMAL_INTEGER(21).nullable(false).defaultValue(DSL.inline("0", SQLDataType.DECIMAL_INTEGER)), this, "")

    /**
     * The column <code>sys.x$statement_analysis.rows_affected</code>.
     */
    val ROWS_AFFECTED: TableField<Record, ULong?> = createField(DSL.name("rows_affected"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.x$statement_analysis.rows_affected_avg</code>.
     */
    val ROWS_AFFECTED_AVG: TableField<Record, BigInteger?> = createField(DSL.name("rows_affected_avg"), SQLDataType.DECIMAL_INTEGER(21).nullable(false).defaultValue(DSL.inline("0", SQLDataType.DECIMAL_INTEGER)), this, "")

    /**
     * The column <code>sys.x$statement_analysis.tmp_tables</code>.
     */
    val TMP_TABLES: TableField<Record, ULong?> = createField(DSL.name("tmp_tables"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.x$statement_analysis.tmp_disk_tables</code>.
     */
    val TMP_DISK_TABLES: TableField<Record, ULong?> = createField(DSL.name("tmp_disk_tables"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.x$statement_analysis.rows_sorted</code>.
     */
    val ROWS_SORTED: TableField<Record, ULong?> = createField(DSL.name("rows_sorted"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.x$statement_analysis.sort_merge_passes</code>.
     */
    val SORT_MERGE_PASSES: TableField<Record, ULong?> = createField(DSL.name("sort_merge_passes"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.x$statement_analysis.digest</code>.
     */
    val DIGEST: TableField<Record, String?> = createField(DSL.name("digest"), SQLDataType.VARCHAR(32), this, "")

    /**
     * The column <code>sys.x$statement_analysis.first_seen</code>.
     */
    val FIRST_SEEN: TableField<Record, LocalDateTime?> = createField(DSL.name("first_seen"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>sys.x$statement_analysis.last_seen</code>.
     */
    val LAST_SEEN: TableField<Record, LocalDateTime?> = createField(DSL.name("last_seen"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>sys.x$statement_analysis</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sys.x$statement_analysis</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sys.x$statement_analysis</code> table reference
     */
    constructor(): this(DSL.name("x\$statement_analysis"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, `X$STATEMENT_ANALYSIS`, null)
    override fun getSchema(): Schema = Sys.SYS
    override fun `as`(alias: String): `X$statementAnalysis` = `X$statementAnalysis`(DSL.name(alias), this)
    override fun `as`(alias: Name): `X$statementAnalysis` = `X$statementAnalysis`(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): `X$statementAnalysis` = `X$statementAnalysis`(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): `X$statementAnalysis` = `X$statementAnalysis`(name, null)
}
