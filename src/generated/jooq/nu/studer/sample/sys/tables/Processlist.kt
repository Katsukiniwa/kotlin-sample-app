/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables


import java.math.BigDecimal

import nu.studer.sample.sys.Sys
import nu.studer.sample.sys.enums.ProcesslistTrxAutocommit
import nu.studer.sample.sys.enums.ProcesslistTrxState

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * VIEW
 */
@Suppress("UNCHECKED_CAST")
open class Processlist(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Sys.SYS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("VIEW"),
    TableOptions.view("create view `processlist` as select `pps`.`THREAD_ID` AS `thd_id`,`pps`.`PROCESSLIST_ID` AS `conn_id`,if((`pps`.`NAME` in ('thread/sql/one_connection','thread/thread_pool/tp_one_connection')),concat(`pps`.`PROCESSLIST_USER`,'@',`pps`.`PROCESSLIST_HOST`),replace(`pps`.`NAME`,'thread/','')) AS `user`,`pps`.`PROCESSLIST_DB` AS `db`,`pps`.`PROCESSLIST_COMMAND` AS `command`,`pps`.`PROCESSLIST_STATE` AS `state`,`pps`.`PROCESSLIST_TIME` AS `time`,`sys`.`format_statement`(`pps`.`PROCESSLIST_INFO`) AS `current_statement`,if(isnull(`esc`.`END_EVENT_ID`),`sys`.`format_time`(`esc`.`TIMER_WAIT`),NULL) AS `statement_latency`,if(isnull(`esc`.`END_EVENT_ID`),round((100 * (`estc`.`WORK_COMPLETED` / `estc`.`WORK_ESTIMATED`)),2),NULL) AS `progress`,`sys`.`format_time`(`esc`.`LOCK_TIME`) AS `lock_latency`,`esc`.`ROWS_EXAMINED` AS `rows_examined`,`esc`.`ROWS_SENT` AS `rows_sent`,`esc`.`ROWS_AFFECTED` AS `rows_affected`,`esc`.`CREATED_TMP_TABLES` AS `tmp_tables`,`esc`.`CREATED_TMP_DISK_TABLES` AS `tmp_disk_tables`,if(((`esc`.`NO_GOOD_INDEX_USED` > 0) or (`esc`.`NO_INDEX_USED` > 0)),'YES','NO') AS `full_scan`,if((`esc`.`END_EVENT_ID` is not null),`sys`.`format_statement`(`esc`.`SQL_TEXT`),NULL) AS `last_statement`,if((`esc`.`END_EVENT_ID` is not null),`sys`.`format_time`(`esc`.`TIMER_WAIT`),NULL) AS `last_statement_latency`,`sys`.`format_bytes`(`mem`.`current_allocated`) AS `current_memory`,`ewc`.`EVENT_NAME` AS `last_wait`,if((isnull(`ewc`.`END_EVENT_ID`) and (`ewc`.`EVENT_NAME` is not null)),'Still Waiting',`sys`.`format_time`(`ewc`.`TIMER_WAIT`)) AS `last_wait_latency`,`ewc`.`SOURCE` AS `source`,`sys`.`format_time`(`etc`.`TIMER_WAIT`) AS `trx_latency`,`etc`.`STATE` AS `trx_state`,`etc`.`AUTOCOMMIT` AS `trx_autocommit`,`conattr_pid`.`ATTR_VALUE` AS `pid`,`conattr_progname`.`ATTR_VALUE` AS `program_name` from (((((((`performance_schema`.`threads` `pps` left join `performance_schema`.`events_waits_current` `ewc` on((`pps`.`THREAD_ID` = `ewc`.`THREAD_ID`))) left join `performance_schema`.`events_stages_current` `estc` on((`pps`.`THREAD_ID` = `estc`.`THREAD_ID`))) left join `performance_schema`.`events_statements_current` `esc` on((`pps`.`THREAD_ID` = `esc`.`THREAD_ID`))) left join `performance_schema`.`events_transactions_current` `etc` on((`pps`.`THREAD_ID` = `etc`.`THREAD_ID`))) left join `sys`.`x\$memory_by_thread_by_current_bytes` `mem` on((`pps`.`THREAD_ID` = `mem`.`thread_id`))) left join `performance_schema`.`session_connect_attrs` `conattr_pid` on(((`conattr_pid`.`PROCESSLIST_ID` = `pps`.`PROCESSLIST_ID`) and (`conattr_pid`.`ATTR_NAME` = '_pid')))) left join `performance_schema`.`session_connect_attrs` `conattr_progname` on(((`conattr_progname`.`PROCESSLIST_ID` = `pps`.`PROCESSLIST_ID`) and (`conattr_progname`.`ATTR_NAME` = 'program_name')))) order by `pps`.`PROCESSLIST_TIME` desc,`last_wait_latency` desc")
) {
    companion object {

        /**
         * The reference instance of <code>sys.processlist</code>
         */
        val PROCESSLIST = Processlist()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>sys.processlist.thd_id</code>.
     */
    val THD_ID: TableField<Record, ULong?> = createField(DSL.name("thd_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.processlist.conn_id</code>.
     */
    val CONN_ID: TableField<Record, ULong?> = createField(DSL.name("conn_id"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>sys.processlist.user</code>.
     */
    val USER: TableField<Record, String?> = createField(DSL.name("user"), SQLDataType.VARCHAR(128), this, "")

    /**
     * The column <code>sys.processlist.db</code>.
     */
    val DB: TableField<Record, String?> = createField(DSL.name("db"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>sys.processlist.command</code>.
     */
    val COMMAND: TableField<Record, String?> = createField(DSL.name("command"), SQLDataType.VARCHAR(16), this, "")

    /**
     * The column <code>sys.processlist.state</code>.
     */
    val STATE: TableField<Record, String?> = createField(DSL.name("state"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>sys.processlist.time</code>.
     */
    val TIME: TableField<Record, Long?> = createField(DSL.name("time"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>sys.processlist.current_statement</code>.
     */
    val CURRENT_STATEMENT: TableField<Record, String?> = createField(DSL.name("current_statement"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.processlist.statement_latency</code>.
     */
    val STATEMENT_LATENCY: TableField<Record, String?> = createField(DSL.name("statement_latency"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.processlist.progress</code>.
     */
    val PROGRESS: TableField<Record, BigDecimal?> = createField(DSL.name("progress"), SQLDataType.DECIMAL(26, 2), this, "")

    /**
     * The column <code>sys.processlist.lock_latency</code>.
     */
    val LOCK_LATENCY: TableField<Record, String?> = createField(DSL.name("lock_latency"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.processlist.rows_examined</code>.
     */
    val ROWS_EXAMINED: TableField<Record, ULong?> = createField(DSL.name("rows_examined"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>sys.processlist.rows_sent</code>.
     */
    val ROWS_SENT: TableField<Record, ULong?> = createField(DSL.name("rows_sent"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>sys.processlist.rows_affected</code>.
     */
    val ROWS_AFFECTED: TableField<Record, ULong?> = createField(DSL.name("rows_affected"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>sys.processlist.tmp_tables</code>.
     */
    val TMP_TABLES: TableField<Record, ULong?> = createField(DSL.name("tmp_tables"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>sys.processlist.tmp_disk_tables</code>.
     */
    val TMP_DISK_TABLES: TableField<Record, ULong?> = createField(DSL.name("tmp_disk_tables"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>sys.processlist.full_scan</code>.
     */
    val FULL_SCAN: TableField<Record, String?> = createField(DSL.name("full_scan"), SQLDataType.VARCHAR(3).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>sys.processlist.last_statement</code>.
     */
    val LAST_STATEMENT: TableField<Record, String?> = createField(DSL.name("last_statement"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.processlist.last_statement_latency</code>.
     */
    val LAST_STATEMENT_LATENCY: TableField<Record, String?> = createField(DSL.name("last_statement_latency"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.processlist.current_memory</code>.
     */
    val CURRENT_MEMORY: TableField<Record, String?> = createField(DSL.name("current_memory"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.processlist.last_wait</code>.
     */
    val LAST_WAIT: TableField<Record, String?> = createField(DSL.name("last_wait"), SQLDataType.VARCHAR(128), this, "")

    /**
     * The column <code>sys.processlist.last_wait_latency</code>.
     */
    val LAST_WAIT_LATENCY: TableField<Record, String?> = createField(DSL.name("last_wait_latency"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.processlist.source</code>.
     */
    val SOURCE: TableField<Record, String?> = createField(DSL.name("source"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>sys.processlist.trx_latency</code>.
     */
    val TRX_LATENCY: TableField<Record, String?> = createField(DSL.name("trx_latency"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.processlist.trx_state</code>.
     */
    val TRX_STATE: TableField<Record, ProcesslistTrxState?> = createField(DSL.name("trx_state"), SQLDataType.VARCHAR(11).asEnumDataType(nu.studer.sample.sys.enums.ProcesslistTrxState::class.java), this, "")

    /**
     * The column <code>sys.processlist.trx_autocommit</code>.
     */
    val TRX_AUTOCOMMIT: TableField<Record, ProcesslistTrxAutocommit?> = createField(DSL.name("trx_autocommit"), SQLDataType.VARCHAR(3).asEnumDataType(nu.studer.sample.sys.enums.ProcesslistTrxAutocommit::class.java), this, "")

    /**
     * The column <code>sys.processlist.pid</code>.
     */
    val PID: TableField<Record, String?> = createField(DSL.name("pid"), SQLDataType.VARCHAR(1024), this, "")

    /**
     * The column <code>sys.processlist.program_name</code>.
     */
    val PROGRAM_NAME: TableField<Record, String?> = createField(DSL.name("program_name"), SQLDataType.VARCHAR(1024), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>sys.processlist</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sys.processlist</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sys.processlist</code> table reference
     */
    constructor(): this(DSL.name("processlist"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PROCESSLIST, null)
    override fun getSchema(): Schema = Sys.SYS
    override fun `as`(alias: String): Processlist = Processlist(DSL.name(alias), this)
    override fun `as`(alias: Name): Processlist = Processlist(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Processlist = Processlist(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Processlist = Processlist(name, null)
}
