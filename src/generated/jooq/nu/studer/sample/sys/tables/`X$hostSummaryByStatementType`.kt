/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables


import nu.studer.sample.sys.Sys

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * VIEW
 */
@Suppress("UNCHECKED_CAST")
open class `X$hostSummaryByStatementType`(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Sys.SYS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("VIEW"),
    TableOptions.view("create view `x\$host_summary_by_statement_type` as select if(isnull(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`HOST`),'background',`performance_schema`.`events_statements_summary_by_host_by_event_name`.`HOST`) AS `host`,substring_index(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`EVENT_NAME`,'/',-(1)) AS `statement`,`performance_schema`.`events_statements_summary_by_host_by_event_name`.`COUNT_STAR` AS `total`,`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_TIMER_WAIT` AS `total_latency`,`performance_schema`.`events_statements_summary_by_host_by_event_name`.`MAX_TIMER_WAIT` AS `max_latency`,`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_LOCK_TIME` AS `lock_latency`,`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_ROWS_SENT` AS `rows_sent`,`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_ROWS_EXAMINED` AS `rows_examined`,`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_ROWS_AFFECTED` AS `rows_affected`,(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_NO_INDEX_USED` + `performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_NO_GOOD_INDEX_USED`) AS `full_scans` from `performance_schema`.`events_statements_summary_by_host_by_event_name` where (`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_TIMER_WAIT` <> 0) order by if(isnull(`performance_schema`.`events_statements_summary_by_host_by_event_name`.`HOST`),'background',`performance_schema`.`events_statements_summary_by_host_by_event_name`.`HOST`),`performance_schema`.`events_statements_summary_by_host_by_event_name`.`SUM_TIMER_WAIT` desc")
) {
    companion object {

        /**
         * The reference instance of <code>sys.x$host_summary_by_statement_type</code>
         */
        val `X$HOST_SUMMARY_BY_STATEMENT_TYPE` = `X$hostSummaryByStatementType`()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>sys.x$host_summary_by_statement_type.host</code>.
     */
    val HOST: TableField<Record, String?> = createField(DSL.name("host"), SQLDataType.VARCHAR(60), this, "")

    /**
     * The column <code>sys.x$host_summary_by_statement_type.statement</code>.
     */
    val STATEMENT: TableField<Record, String?> = createField(DSL.name("statement"), SQLDataType.VARCHAR(128), this, "")

    /**
     * The column <code>sys.x$host_summary_by_statement_type.total</code>.
     */
    val TOTAL: TableField<Record, ULong?> = createField(DSL.name("total"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.x$host_summary_by_statement_type.total_latency</code>.
     */
    val TOTAL_LATENCY: TableField<Record, ULong?> = createField(DSL.name("total_latency"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.x$host_summary_by_statement_type.max_latency</code>.
     */
    val MAX_LATENCY: TableField<Record, ULong?> = createField(DSL.name("max_latency"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.x$host_summary_by_statement_type.lock_latency</code>.
     */
    val LOCK_LATENCY: TableField<Record, ULong?> = createField(DSL.name("lock_latency"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.x$host_summary_by_statement_type.rows_sent</code>.
     */
    val ROWS_SENT: TableField<Record, ULong?> = createField(DSL.name("rows_sent"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.x$host_summary_by_statement_type.rows_examined</code>.
     */
    val ROWS_EXAMINED: TableField<Record, ULong?> = createField(DSL.name("rows_examined"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.x$host_summary_by_statement_type.rows_affected</code>.
     */
    val ROWS_AFFECTED: TableField<Record, ULong?> = createField(DSL.name("rows_affected"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.x$host_summary_by_statement_type.full_scans</code>.
     */
    val FULL_SCANS: TableField<Record, ULong?> = createField(DSL.name("full_scans"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>sys.x$host_summary_by_statement_type</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sys.x$host_summary_by_statement_type</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sys.x$host_summary_by_statement_type</code> table reference
     */
    constructor(): this(DSL.name("x\$host_summary_by_statement_type"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, `X$HOST_SUMMARY_BY_STATEMENT_TYPE`, null)
    override fun getSchema(): Schema = Sys.SYS
    override fun `as`(alias: String): `X$hostSummaryByStatementType` = `X$hostSummaryByStatementType`(DSL.name(alias), this)
    override fun `as`(alias: Name): `X$hostSummaryByStatementType` = `X$hostSummaryByStatementType`(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): `X$hostSummaryByStatementType` = `X$hostSummaryByStatementType`(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): `X$hostSummaryByStatementType` = `X$hostSummaryByStatementType`(name, null)
}
