/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables


import nu.studer.sample.sys.Sys

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * VIEW
 */
@Suppress("UNCHECKED_CAST")
open class SchemaTablesWithFullTableScans(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Sys.SYS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("VIEW"),
    TableOptions.view("create view `schema_tables_with_full_table_scans` as select `performance_schema`.`table_io_waits_summary_by_index_usage`.`OBJECT_SCHEMA` AS `object_schema`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`OBJECT_NAME` AS `object_name`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`COUNT_READ` AS `rows_full_scanned`,`sys`.`format_time`(`performance_schema`.`table_io_waits_summary_by_index_usage`.`SUM_TIMER_WAIT`) AS `latency` from `performance_schema`.`table_io_waits_summary_by_index_usage` where (isnull(`performance_schema`.`table_io_waits_summary_by_index_usage`.`INDEX_NAME`) and (`performance_schema`.`table_io_waits_summary_by_index_usage`.`COUNT_READ` > 0)) order by `performance_schema`.`table_io_waits_summary_by_index_usage`.`COUNT_READ` desc")
) {
    companion object {

        /**
         * The reference instance of <code>sys.schema_tables_with_full_table_scans</code>
         */
        val SCHEMA_TABLES_WITH_FULL_TABLE_SCANS = SchemaTablesWithFullTableScans()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>sys.schema_tables_with_full_table_scans.object_schema</code>.
     */
    val OBJECT_SCHEMA: TableField<Record, String?> = createField(DSL.name("object_schema"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>sys.schema_tables_with_full_table_scans.object_name</code>.
     */
    val OBJECT_NAME: TableField<Record, String?> = createField(DSL.name("object_name"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>sys.schema_tables_with_full_table_scans.rows_full_scanned</code>.
     */
    val ROWS_FULL_SCANNED: TableField<Record, ULong?> = createField(DSL.name("rows_full_scanned"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.schema_tables_with_full_table_scans.latency</code>.
     */
    val LATENCY: TableField<Record, String?> = createField(DSL.name("latency"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>sys.schema_tables_with_full_table_scans</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sys.schema_tables_with_full_table_scans</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sys.schema_tables_with_full_table_scans</code> table reference
     */
    constructor(): this(DSL.name("schema_tables_with_full_table_scans"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, SCHEMA_TABLES_WITH_FULL_TABLE_SCANS, null)
    override fun getSchema(): Schema = Sys.SYS
    override fun `as`(alias: String): SchemaTablesWithFullTableScans = SchemaTablesWithFullTableScans(DSL.name(alias), this)
    override fun `as`(alias: Name): SchemaTablesWithFullTableScans = SchemaTablesWithFullTableScans(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SchemaTablesWithFullTableScans = SchemaTablesWithFullTableScans(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SchemaTablesWithFullTableScans = SchemaTablesWithFullTableScans(name, null)
}
