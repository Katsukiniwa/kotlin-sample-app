/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables


import nu.studer.sample.sys.Sys

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * VIEW
 */
@Suppress("UNCHECKED_CAST")
open class SchemaUnusedIndexes(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Sys.SYS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("VIEW"),
    TableOptions.view("create view `schema_unused_indexes` as select `t`.`OBJECT_SCHEMA` AS `object_schema`,`t`.`OBJECT_NAME` AS `object_name`,`t`.`INDEX_NAME` AS `index_name` from (`performance_schema`.`table_io_waits_summary_by_index_usage` `t` join `information_schema`.`statistics` `s` on(((`t`.`OBJECT_SCHEMA` = `s`.`TABLE_SCHEMA`) and (`t`.`OBJECT_NAME` = `s`.`TABLE_NAME`) and (`t`.`INDEX_NAME` = `s`.`INDEX_NAME`)))) where ((`t`.`INDEX_NAME` is not null) and (`t`.`COUNT_STAR` = 0) and (`t`.`OBJECT_SCHEMA` <> 'mysql') and (`t`.`INDEX_NAME` <> 'PRIMARY') and (`s`.`NON_UNIQUE` = 1) and (`s`.`SEQ_IN_INDEX` = 1)) order by `t`.`OBJECT_SCHEMA`,`t`.`OBJECT_NAME`")
) {
    companion object {

        /**
         * The reference instance of <code>sys.schema_unused_indexes</code>
         */
        val SCHEMA_UNUSED_INDEXES = SchemaUnusedIndexes()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>sys.schema_unused_indexes.object_schema</code>.
     */
    val OBJECT_SCHEMA: TableField<Record, String?> = createField(DSL.name("object_schema"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>sys.schema_unused_indexes.object_name</code>.
     */
    val OBJECT_NAME: TableField<Record, String?> = createField(DSL.name("object_name"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>sys.schema_unused_indexes.index_name</code>.
     */
    val INDEX_NAME: TableField<Record, String?> = createField(DSL.name("index_name"), SQLDataType.VARCHAR(64), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>sys.schema_unused_indexes</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sys.schema_unused_indexes</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sys.schema_unused_indexes</code> table reference
     */
    constructor(): this(DSL.name("schema_unused_indexes"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, SCHEMA_UNUSED_INDEXES, null)
    override fun getSchema(): Schema = Sys.SYS
    override fun `as`(alias: String): SchemaUnusedIndexes = SchemaUnusedIndexes(DSL.name(alias), this)
    override fun `as`(alias: Name): SchemaUnusedIndexes = SchemaUnusedIndexes(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SchemaUnusedIndexes = SchemaUnusedIndexes(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SchemaUnusedIndexes = SchemaUnusedIndexes(name, null)
}
