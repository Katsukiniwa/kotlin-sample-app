/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables


import java.math.BigDecimal

import nu.studer.sample.sys.Sys

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * VIEW
 */
@Suppress("UNCHECKED_CAST")
open class `X$ioGlobalByFileByBytes`(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Sys.SYS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("VIEW"),
    TableOptions.view("create view `x\$io_global_by_file_by_bytes` as select `performance_schema`.`file_summary_by_instance`.`FILE_NAME` AS `file`,`performance_schema`.`file_summary_by_instance`.`COUNT_READ` AS `count_read`,`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` AS `total_read`,ifnull((`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` / nullif(`performance_schema`.`file_summary_by_instance`.`COUNT_READ`,0)),0) AS `avg_read`,`performance_schema`.`file_summary_by_instance`.`COUNT_WRITE` AS `count_write`,`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE` AS `total_written`,ifnull((`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE` / nullif(`performance_schema`.`file_summary_by_instance`.`COUNT_WRITE`,0)),0.00) AS `avg_write`,(`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` + `performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE`) AS `total`,ifnull(round((100 - ((`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` / nullif((`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` + `performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE`),0)) * 100)),2),0.00) AS `write_pct` from `performance_schema`.`file_summary_by_instance` order by (`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` + `performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE`) desc")
) {
    companion object {

        /**
         * The reference instance of <code>sys.x$io_global_by_file_by_bytes</code>
         */
        val `X$IO_GLOBAL_BY_FILE_BY_BYTES` = `X$ioGlobalByFileByBytes`()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>sys.x$io_global_by_file_by_bytes.file</code>.
     */
    val FILE: TableField<Record, String?> = createField(DSL.name("file"), SQLDataType.VARCHAR(512).nullable(false), this, "")

    /**
     * The column <code>sys.x$io_global_by_file_by_bytes.count_read</code>.
     */
    val COUNT_READ: TableField<Record, ULong?> = createField(DSL.name("count_read"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.x$io_global_by_file_by_bytes.total_read</code>.
     */
    val TOTAL_READ: TableField<Record, Long?> = createField(DSL.name("total_read"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>sys.x$io_global_by_file_by_bytes.avg_read</code>.
     */
    val AVG_READ: TableField<Record, BigDecimal?> = createField(DSL.name("avg_read"), SQLDataType.DECIMAL(23, 4).nullable(false).defaultValue(DSL.inline("0.0000", SQLDataType.DECIMAL)), this, "")

    /**
     * The column <code>sys.x$io_global_by_file_by_bytes.count_write</code>.
     */
    val COUNT_WRITE: TableField<Record, ULong?> = createField(DSL.name("count_write"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.x$io_global_by_file_by_bytes.total_written</code>.
     */
    val TOTAL_WRITTEN: TableField<Record, Long?> = createField(DSL.name("total_written"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>sys.x$io_global_by_file_by_bytes.avg_write</code>.
     */
    val AVG_WRITE: TableField<Record, BigDecimal?> = createField(DSL.name("avg_write"), SQLDataType.DECIMAL(23, 4).nullable(false).defaultValue(DSL.inline("0.0000", SQLDataType.DECIMAL)), this, "")

    /**
     * The column <code>sys.x$io_global_by_file_by_bytes.total</code>.
     */
    val TOTAL: TableField<Record, Long?> = createField(DSL.name("total"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "")

    /**
     * The column <code>sys.x$io_global_by_file_by_bytes.write_pct</code>.
     */
    val WRITE_PCT: TableField<Record, BigDecimal?> = createField(DSL.name("write_pct"), SQLDataType.DECIMAL(26, 2).nullable(false).defaultValue(DSL.inline("0.00", SQLDataType.DECIMAL)), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>sys.x$io_global_by_file_by_bytes</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sys.x$io_global_by_file_by_bytes</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sys.x$io_global_by_file_by_bytes</code> table reference
     */
    constructor(): this(DSL.name("x\$io_global_by_file_by_bytes"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, `X$IO_GLOBAL_BY_FILE_BY_BYTES`, null)
    override fun getSchema(): Schema = Sys.SYS
    override fun `as`(alias: String): `X$ioGlobalByFileByBytes` = `X$ioGlobalByFileByBytes`(DSL.name(alias), this)
    override fun `as`(alias: Name): `X$ioGlobalByFileByBytes` = `X$ioGlobalByFileByBytes`(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): `X$ioGlobalByFileByBytes` = `X$ioGlobalByFileByBytes`(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): `X$ioGlobalByFileByBytes` = `X$ioGlobalByFileByBytes`(name, null)
}
