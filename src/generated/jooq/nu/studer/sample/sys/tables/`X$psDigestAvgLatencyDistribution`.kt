/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables


import java.math.BigInteger

import nu.studer.sample.sys.Sys

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * VIEW
 */
@Suppress("UNCHECKED_CAST")
open class `X$psDigestAvgLatencyDistribution`(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Sys.SYS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("VIEW"),
    TableOptions.view("create view `x\$ps_digest_avg_latency_distribution` as select count(0) AS `cnt`,round((`performance_schema`.`events_statements_summary_by_digest`.`AVG_TIMER_WAIT` / 1000000),0) AS `avg_us` from `performance_schema`.`events_statements_summary_by_digest` group by `avg_us`")
) {
    companion object {

        /**
         * The reference instance of <code>sys.x$ps_digest_avg_latency_distribution</code>
         */
        val `X$PS_DIGEST_AVG_LATENCY_DISTRIBUTION` = `X$psDigestAvgLatencyDistribution`()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>sys.x$ps_digest_avg_latency_distribution.cnt</code>.
     */
    val CNT: TableField<Record, Long?> = createField(DSL.name("cnt"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "")

    /**
     * The column <code>sys.x$ps_digest_avg_latency_distribution.avg_us</code>.
     */
    val AVG_US: TableField<Record, BigInteger?> = createField(DSL.name("avg_us"), SQLDataType.DECIMAL_INTEGER(21), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>sys.x$ps_digest_avg_latency_distribution</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sys.x$ps_digest_avg_latency_distribution</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sys.x$ps_digest_avg_latency_distribution</code> table reference
     */
    constructor(): this(DSL.name("x\$ps_digest_avg_latency_distribution"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, `X$PS_DIGEST_AVG_LATENCY_DISTRIBUTION`, null)
    override fun getSchema(): Schema = Sys.SYS
    override fun `as`(alias: String): `X$psDigestAvgLatencyDistribution` = `X$psDigestAvgLatencyDistribution`(DSL.name(alias), this)
    override fun `as`(alias: Name): `X$psDigestAvgLatencyDistribution` = `X$psDigestAvgLatencyDistribution`(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): `X$psDigestAvgLatencyDistribution` = `X$psDigestAvgLatencyDistribution`(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): `X$psDigestAvgLatencyDistribution` = `X$psDigestAvgLatencyDistribution`(name, null)
}
