/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.routines


import nu.studer.sample.sys.Sys

import org.jooq.Field
import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


/**
 * 
 *  Description
 *  
 *  Takes a list, and a value to add to the list, and returns the resulting 
 * list.
 *  
 *  Useful for altering certain session variables, like sql_mode or optimizer_switch 
 * for instance.
 *  
 *  Parameters
 *  
 *  in_list (    TEXT):
 *  The comma separated list to add a value to
 *  
 *  in_add_value (TEXT):
 *  The value to add to the input list
 *  
 *  Returns
 *  
 *  TEXT
 *  
 *  Example
 *  
 *  mysql&gt; select @@sql_mode;
 *  +-----------------------------------------------------------------------------------+
 *  | @@sql_mode                                                          
 *               |
 *  +-----------------------------------------------------------------------------------+
 *  | ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION 
 * |
 *  +-----------------------------------------------------------------------------------+
 *  1 row in set (    0.00 sec)
 *  
 *  mysql&gt; set sql_mode = sys.list_add(@@sql_mode, 'ANSI_QUOTES');
 *  Query OK, 0 rows affected (0.06 sec)
 *  
 *  mysql&gt; select @@sql_mode;
 *  +-----------------------------------------------------------------------------------------------+
 *  | @@sql_mode                                                          
 *                           |
 *  +-----------------------------------------------------------------------------------------------+
 *  | ANSI_QUOTES,ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION 
 * |
 *  +-----------------------------------------------------------------------------------------------+
 *  1 row in set (    0.00 sec)
 *  
 *  
 */
@Suppress("UNCHECKED_CAST")
open class ListAdd : AbstractRoutine<String>("list_add", Sys.SYS, SQLDataType.CLOB) {
    companion object {

        /**
         * The parameter <code>sys.list_add.RETURN_VALUE</code>.
         */
        val RETURN_VALUE: Parameter<String?> = Internal.createParameter("RETURN_VALUE", SQLDataType.CLOB, false, false)

        /**
         * The parameter <code>sys.list_add.in_list</code>.
         */
        val IN_LIST: Parameter<String?> = Internal.createParameter("in_list", SQLDataType.CLOB, false, false)

        /**
         * The parameter <code>sys.list_add.in_add_value</code>.
         */
        val IN_ADD_VALUE: Parameter<String?> = Internal.createParameter("in_add_value", SQLDataType.CLOB, false, false)
    }

    init {
        returnParameter = RETURN_VALUE
        addInParameter(IN_LIST)
        addInParameter(IN_ADD_VALUE)
    }

    /**
     * Set the <code>in_list</code> parameter IN value to the routine
     */
    fun setInList(value: String?) = setValue(IN_LIST, value)

    /**
     * Set the <code>in_list</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setInList(field: Field<String?>): Unit {
        setField(IN_LIST, field)
    }

    /**
     * Set the <code>in_add_value</code> parameter IN value to the routine
     */
    fun setInAddValue(value: String?) = setValue(IN_ADD_VALUE, value)

    /**
     * Set the <code>in_add_value</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setInAddValue(field: Field<String?>): Unit {
        setField(IN_ADD_VALUE, field)
    }
}
