/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.routines


import nu.studer.sample.sys.Sys

import org.jooq.Field
import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


/**
 * 
 *  Description
 *  
 *  Takes a raw file path, and extracts the table name from it.
 *  
 *  Useful for when interacting with Performance Schema data 
 *  concerning IO statistics, for example.
 *  
 *  Parameters
 *  
 *  path (    VARCHAR(512)):
 *  The full file path to a data file to extract the table name from.
 *  
 *  Returns
 *  
 *  VARCHAR(64)
 *  
 *  Example
 *  
 *  mysql&gt; SELECT sys.extract_table_from_file_name('/var/lib/mysql/employees/employee.ibd');
 *  +---------------------------------------------------------------------------+
 *  | sys.extract_table_from_file_name('/var/lib/mysql/employees/employee.ibd') 
 * |
 *  +---------------------------------------------------------------------------+
 *  | employee                                                            
 *       |
 *  +---------------------------------------------------------------------------+
 *  1 row in set (    0.02 sec)
 *  
 */
@Suppress("UNCHECKED_CAST")
open class ExtractTableFromFileName : AbstractRoutine<String>("extract_table_from_file_name", Sys.SYS, SQLDataType.VARCHAR(64)) {
    companion object {

        /**
         * The parameter <code>sys.extract_table_from_file_name.RETURN_VALUE</code>.
         */
        val RETURN_VALUE: Parameter<String?> = Internal.createParameter("RETURN_VALUE", SQLDataType.VARCHAR(64), false, false)

        /**
         * The parameter <code>sys.extract_table_from_file_name.path</code>.
         */
        val PATH: Parameter<String?> = Internal.createParameter("path", SQLDataType.VARCHAR(512), false, false)
    }

    init {
        returnParameter = RETURN_VALUE
        addInParameter(PATH)
    }

    /**
     * Set the <code>path</code> parameter IN value to the routine
     */
    fun setPath(value: String?) = setValue(PATH, value)

    /**
     * Set the <code>path</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setPath(field: Field<String?>): Unit {
        setField(PATH, field)
    }
}
