/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.routines


import nu.studer.sample.sys.Sys

import org.jooq.Field
import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.types.ULong


/**
 * 
 *  Description
 *  
 *  Checks whether the provided connection id is instrumented within Performance 
 * Schema.
 *  
 *  Parameters
 *  
 *  in_connection_id (    BIGINT UNSIGNED):
 *  The id of the connection to check.
 *  
 *  Returns
 *  
 *  ENUM('YES', 'NO', 'UNKNOWN')
 *  
 *  Example
 *  
 *  mysql&gt; SELECT sys.ps_is_thread_instrumented(CONNECTION_ID());
 *  +------------------------------------------------+
 *  | sys.ps_is_thread_instrumented(CONNECTION_ID()) |
 *  +------------------------------------------------+
 *  | YES                                            |
 *  +------------------------------------------------+
 *  
 */
@Suppress("UNCHECKED_CAST")
open class PsIsThreadInstrumented : AbstractRoutine<String>("ps_is_thread_instrumented", Sys.SYS, SQLDataType.VARCHAR(7)) {
    companion object {

        /**
         * The parameter <code>sys.ps_is_thread_instrumented.RETURN_VALUE</code>.
         */
        val RETURN_VALUE: Parameter<String?> = Internal.createParameter("RETURN_VALUE", SQLDataType.VARCHAR(7), false, false)

        /**
         * The parameter <code>sys.ps_is_thread_instrumented.in_connection_id</code>.
         */
        val IN_CONNECTION_ID: Parameter<ULong?> = Internal.createParameter("in_connection_id", SQLDataType.BIGINTUNSIGNED, false, false)
    }

    init {
        returnParameter = RETURN_VALUE
        addInParameter(IN_CONNECTION_ID)
    }

    /**
     * Set the <code>in_connection_id</code> parameter IN value to the routine
     */
    fun setInConnectionId(value: ULong?) = setValue(IN_CONNECTION_ID, value)

    /**
     * Set the <code>in_connection_id</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setInConnectionId(field: Field<ULong?>): Unit {
        setField(IN_CONNECTION_ID, field)
    }
}
