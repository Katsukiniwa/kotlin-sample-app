/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.routines


import nu.studer.sample.sys.Sys

import org.jooq.Field
import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


/**
 * 
 *  Description
 *  
 *  Determines whether instrumentation of an account is enabled 
 *  within Performance Schema.
 *  
 *  Parameters
 *  
 *  in_host VARCHAR(    60): 
 *  The hostname of the account to check.
 *  in_user VARCHAR(32):
 *  The username of the account to check.
 *  
 *  Returns
 *  
 *  ENUM('YES', 'NO', 'PARTIAL')
 *  
 *  Example
 *  
 *  mysql&gt; SELECT sys.ps_is_account_enabled('localhost', 'root');
 *  +------------------------------------------------+
 *  | sys.ps_is_account_enabled('localhost', 'root') |
 *  +------------------------------------------------+
 *  | YES                                            |
 *  +------------------------------------------------+
 *  1 row in set (0.01 sec)
 *  
 */
@Suppress("UNCHECKED_CAST")
open class PsIsAccountEnabled : AbstractRoutine<String>("ps_is_account_enabled", Sys.SYS, SQLDataType.VARCHAR(3)) {
    companion object {

        /**
         * The parameter <code>sys.ps_is_account_enabled.RETURN_VALUE</code>.
         */
        val RETURN_VALUE: Parameter<String?> = Internal.createParameter("RETURN_VALUE", SQLDataType.VARCHAR(3), false, false)

        /**
         * The parameter <code>sys.ps_is_account_enabled.in_host</code>.
         */
        val IN_HOST: Parameter<String?> = Internal.createParameter("in_host", SQLDataType.VARCHAR(60), false, false)

        /**
         * The parameter <code>sys.ps_is_account_enabled.in_user</code>.
         */
        val IN_USER: Parameter<String?> = Internal.createParameter("in_user", SQLDataType.VARCHAR(32), false, false)
    }

    init {
        returnParameter = RETURN_VALUE
        addInParameter(IN_HOST)
        addInParameter(IN_USER)
    }

    /**
     * Set the <code>in_host</code> parameter IN value to the routine
     */
    fun setInHost(value: String?) = setValue(IN_HOST, value)

    /**
     * Set the <code>in_host</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setInHost(field: Field<String?>): Unit {
        setField(IN_HOST, field)
    }

    /**
     * Set the <code>in_user</code> parameter IN value to the routine
     */
    fun setInUser(value: String?) = setValue(IN_USER, value)

    /**
     * Set the <code>in_user</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setInUser(field: Field<String?>): Unit {
        setField(IN_USER, field)
    }
}
